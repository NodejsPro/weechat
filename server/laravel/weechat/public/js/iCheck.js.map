{"version":3,"sources":["jquery.icheck.js","icheck-init.js"],"names":[],"mappingscfile":"iCheck.js","sourcesContent":["/*!\r\n * iCheck v0.9.1, http://git.io/uhUPMA\r\n * =================================\r\n * Powerful jQuery plugin for checkboxes and radio buttons customization\r\n *\r\n * (c) 2013 Damir Foy, http://damirfoy.com\r\n * MIT Licensed\r\n */\r\n\r\n(function($) {\r\n\r\n    // Cached vars\r\n    var _iCheck = 'iCheck',\r\n        _iCheckHelper = _iCheck + '-helper',\r\n        _checkbox = 'checkbox',\r\n        _radio = 'radio',\r\n        _checked = 'checked',\r\n        _unchecked = 'un' + _checked,\r\n        _disabled = 'disabled',\r\n        _determinate = 'determinate',\r\n        _indeterminate = 'in' + _determinate,\r\n        _update = 'update',\r\n        _type = 'type',\r\n        _click = 'click',\r\n        _touch = 'touchbegin.i touchend.i',\r\n        _add = 'addClass',\r\n        _remove = 'removeClass',\r\n        _callback = 'trigger',\r\n        _label = 'label',\r\n        _cursor = 'cursor',\r\n        _mobile = /ipad|iphone|ipod|android|blackberry|windows phone|opera mini|silk/i.test(navigator.userAgent);\r\n\r\n    // Plugin init\r\n    $.fn[_iCheck] = function(options, fire) {\r\n\r\n        // Walker\r\n        var handle = ':' + _checkbox + ', :' + _radio,\r\n            stack = $(),\r\n            walker = function(object) {\r\n                object.each(function() {\r\n                    var self = $(this);\r\n\r\n                    if (self.is(handle)) {\r\n                        stack = stack.add(self);\r\n                    } else {\r\n                        stack = stack.add(self.find(handle));\r\n                    };\r\n                });\r\n            };\r\n\r\n        // Check if we should operate with some method\r\n        if (/^(check|uncheck|toggle|indeterminate|determinate|disable|enable|update|destroy)$/i.test(options)) {\r\n\r\n            // Normalize method's name\r\n            options = options.toLowerCase();\r\n\r\n            // Find checkboxes and radio buttons\r\n            walker(this);\r\n\r\n            return stack.each(function() {\r\n                if (options == 'destroy') {\r\n                    tidy(this, 'ifDestroyed');\r\n                } else {\r\n                    operate($(this), true, options);\r\n                };\r\n\r\n                // Fire method's callback\r\n                if ($.isFunction(fire)) {\r\n                    fire();\r\n                };\r\n            });\r\n\r\n            // Customization\r\n        } else if (typeof options == 'object' || !options) {\r\n\r\n            // Check if any options were passed\r\n            var settings = $.extend({\r\n                    checkedClass: _checked,\r\n                    disabledClass: _disabled,\r\n                    indeterminateClass: _indeterminate,\r\n                    labelHover: true\r\n                }, options),\r\n\r\n                selector = settings.handle,\r\n                hoverClass = settings.hoverClass || 'hover',\r\n                focusClass = settings.focusClass || 'focus',\r\n                activeClass = settings.activeClass || 'active',\r\n                labelHover = !!settings.labelHover,\r\n                labelHoverClass = settings.labelHoverClass || 'hover',\r\n\r\n                // Setup clickable area\r\n                area = ('' + settings.increaseArea).replace('%', '') | 0;\r\n\r\n            // Selector limit\r\n            if (selector == _checkbox || selector == _radio) {\r\n                handle = ':' + selector;\r\n            };\r\n\r\n            // Clickable area limit\r\n            if (area < -50) {\r\n                area = -50;\r\n            };\r\n\r\n            // Walk around the selector\r\n            walker(this);\r\n\r\n            return stack.each(function() {\r\n\r\n                // If already customized\r\n                tidy(this);\r\n\r\n                var self = $(this),\r\n                    node = this,\r\n                    id = node.id,\r\n\r\n                    // Layer styles\r\n                    offset = -area + '%',\r\n                    size = 100 + (area * 2) + '%',\r\n                    layer = {\r\n                        position: 'absolute',\r\n                        top: offset,\r\n                        left: offset,\r\n                        display: 'block',\r\n                        width: size,\r\n                        height: size,\r\n                        margin: 0,\r\n                        padding: 0,\r\n                        background: '#fff',\r\n                        border: 0,\r\n                        opacity: 0\r\n                    },\r\n\r\n                    // Choose how to hide input\r\n                    hide = _mobile ? {\r\n                        position: 'absolute',\r\n                        visibility: 'hidden'\r\n                    } : area ? layer : {\r\n                        position: 'absolute',\r\n                        opacity: 0\r\n                    },\r\n\r\n                    // Get proper class\r\n                    className = node[_type] == _checkbox ? settings.checkboxClass || 'i' + _checkbox : settings.radioClass || 'i' + _radio,\r\n\r\n                    // Find assigned labels\r\n                    label = $(_label + '[for=\"' + id + '\"]').add(self.closest(_label)),\r\n\r\n                    // Wrap input\r\n                    parent = self.wrap('<div class=\"' + className + '\"/>')[_callback]('ifCreated').parent().append(settings.insert),\r\n\r\n                    // Layer addition\r\n                    helper = $('<ins class=\"' + _iCheckHelper + '\"/>').css(layer).appendTo(parent);\r\n\r\n                // Finalize customization\r\n                self.data(_iCheck, {o: settings, s: self.attr('style')}).css(hide);\r\n                !!settings.inheritClass && parent[_add](node.className);\r\n                !!settings.inheritID && id && parent.attr('id', _iCheck + '-' + id);\r\n                parent.css('position') == 'static' && parent.css('position', 'relative');\r\n                operate(self, true, _update);\r\n\r\n                // Label events\r\n                if (label.length) {\r\n                    label.on(_click + '.i mouseenter.i mouseleave.i ' + _touch, function(event) {\r\n                        var type = event[_type],\r\n                            item = $(this);\r\n\r\n                        // Do nothing if input is disabled\r\n                        if (!node[_disabled]) {\r\n\r\n                            // Click\r\n                            if (type == _click) {\r\n                                operate(self, false, true);\r\n\r\n                                // Hover state\r\n                            } else if (labelHover) {\r\n\r\n                                // mouseleave|touchend\r\n                                if (/ve|nd/.test(type)) {\r\n                                    parent[_remove](hoverClass);\r\n                                    item[_remove](labelHoverClass);\r\n                                } else {\r\n                                    parent[_add](hoverClass);\r\n                                    item[_add](labelHoverClass);\r\n                                };\r\n                            };\r\n\r\n                            if (_mobile) {\r\n                                event.stopPropagation();\r\n                            } else {\r\n                                return false;\r\n                            };\r\n                        };\r\n                    });\r\n                };\r\n\r\n                // Input events\r\n                self.on(_click + '.i focus.i blur.i keyup.i keydown.i keypress.i', function(event) {\r\n                    var type = event[_type],\r\n                        key = event.keyCode;\r\n\r\n                    // Click\r\n                    if (type == _click) {\r\n                        return false;\r\n\r\n                        // Keydown\r\n                    } else if (type == 'keydown' && key == 32) {\r\n                        if (!(node[_type] == _radio && node[_checked])) {\r\n                            if (node[_checked]) {\r\n                                off(self, _checked);\r\n                            } else {\r\n                                on(self, _checked);\r\n                            };\r\n                        };\r\n\r\n                        return false;\r\n\r\n                        // Keyup\r\n                    } else if (type == 'keyup' && node[_type] == _radio) {\r\n                        !node[_checked] && on(self, _checked);\r\n\r\n                        // Focus/blur\r\n                    } else if (/us|ur/.test(type)) {\r\n                        parent[type == 'blur' ? _remove : _add](focusClass);\r\n                    };\r\n                });\r\n\r\n                // Helper events\r\n                helper.on(_click + ' mousedown mouseup mouseover mouseout ' + _touch, function(event) {\r\n                    var type = event[_type],\r\n\r\n                        // mousedown|mouseup\r\n                        toggle = /wn|up/.test(type) ? activeClass : hoverClass;\r\n\r\n                    // Do nothing if input is disabled\r\n                    if (!node[_disabled]) {\r\n\r\n                        // Click\r\n                        if (type == _click) {\r\n                            operate(self, false, true);\r\n\r\n                            // Active and hover states\r\n                        } else {\r\n\r\n                            // State is on\r\n                            if (/wn|er|in/.test(type)) {\r\n\r\n                                // mousedown|mouseover|touchbegin\r\n                                parent[_add](toggle);\r\n\r\n                                // State is off\r\n                            } else {\r\n                                parent[_remove](toggle + ' ' + activeClass);\r\n                            };\r\n\r\n                            // Label hover\r\n                            if (label.length && labelHover && toggle == hoverClass) {\r\n\r\n                                // mouseout|touchend\r\n                                label[/ut|nd/.test(type) ? _remove : _add](labelHoverClass);\r\n                            };\r\n                        };\r\n\r\n                        if (_mobile) {\r\n                            event.stopPropagation();\r\n                        } else {\r\n                            return false;\r\n                        };\r\n                    };\r\n                });\r\n            });\r\n        } else {\r\n            return this;\r\n        };\r\n    };\r\n\r\n    // Do something with inputs\r\n    function operate(input, direct, method) {\r\n        var node = input[0];\r\n        state = /er/.test(method) ? _indeterminate : /bl/.test(method) ? _disabled : _checked,\r\n            active = method == _update ? {\r\n                checked: node[_checked],\r\n                disabled: node[_disabled],\r\n                indeterminate: input.attr(_indeterminate) == 'true' || input.attr(_determinate) == 'false'\r\n            } : node[state];\r\n\r\n        // Check, disable or indeterminate\r\n        if (/^(ch|di|in)/.test(method) && !active) {\r\n            on(input, state);\r\n\r\n            // Uncheck, enable or determinate\r\n        } else if (/^(un|en|de)/.test(method) && active) {\r\n            off(input, state);\r\n\r\n            // Update\r\n        } else if (method == _update) {\r\n\r\n            // Handle states\r\n            for (var state in active) {\r\n                if (active[state]) {\r\n                    on(input, state, true);\r\n                } else {\r\n                    off(input, state, true);\r\n                };\r\n            };\r\n\r\n        } else if (!direct || method == 'toggle') {\r\n\r\n            // Helper or label was clicked\r\n            if (!direct) {\r\n                input[_callback]('ifClicked');\r\n            };\r\n\r\n            // Toggle checked state\r\n            if (active) {\r\n                if (node[_type] !== _radio) {\r\n                    off(input, state);\r\n                };\r\n            } else {\r\n                on(input, state);\r\n            };\r\n        };\r\n    };\r\n\r\n    // Add checked, disabled or indeterminate state\r\n    function on(input, state, keep) {\r\n        var node = input[0],\r\n            parent = input.parent(),\r\n            checked = state == _checked,\r\n            indeterminate = state == _indeterminate,\r\n            callback = indeterminate ? _determinate : checked ? _unchecked : 'enabled',\r\n            regular = option(node, callback + capitalize(node[_type])),\r\n            specific = option(node, state + capitalize(node[_type]));\r\n\r\n        // Prevent unnecessary actions\r\n        if (node[state] !== true) {\r\n\r\n            // Toggle assigned radio buttons\r\n            if (!keep && state == _checked && node[_type] == _radio && node.name) {\r\n                var form = input.closest('form'),\r\n                    inputs = 'input[name=\"' + node.name + '\"]';\r\n\r\n                inputs = form.length ? form.find(inputs) : $(inputs);\r\n\r\n                inputs.each(function() {\r\n                    if (this !== node && $.data(this, _iCheck)) {\r\n                        off($(this), state);\r\n                    };\r\n                });\r\n            };\r\n\r\n            // Indeterminate state\r\n            if (indeterminate) {\r\n\r\n                // Add indeterminate state\r\n                node[state] = true;\r\n\r\n                // Remove checked state\r\n                if (node[_checked]) {\r\n                    off(input, _checked, 'force');\r\n                };\r\n\r\n                // Checked or disabled state\r\n            } else {\r\n\r\n                // Add checked or disabled state\r\n                if (!keep) {\r\n                    node[state] = true;\r\n                };\r\n\r\n                // Remove indeterminate state\r\n                if (checked && node[_indeterminate]) {\r\n                    off(input, _indeterminate, false);\r\n                };\r\n            };\r\n\r\n            // Trigger callbacks\r\n            callbacks(input, checked, state, keep);\r\n        };\r\n\r\n        // Add proper cursor\r\n        if (node[_disabled] && !!option(node, _cursor, true)) {\r\n            parent.find('.' + _iCheckHelper).css(_cursor, 'default');\r\n        };\r\n\r\n        // Add state class\r\n        parent[_add](specific || option(node, state));\r\n\r\n        // Remove regular state class\r\n        parent[_remove](regular || option(node, callback) || '');\r\n    };\r\n\r\n    // Remove checked, disabled or indeterminate state\r\n    function off(input, state, keep) {\r\n        var node = input[0],\r\n            parent = input.parent(),\r\n            checked = state == _checked,\r\n            indeterminate = state == _indeterminate,\r\n            callback = indeterminate ? _determinate : checked ? _unchecked : 'enabled',\r\n            regular = option(node, callback + capitalize(node[_type])),\r\n            specific = option(node, state + capitalize(node[_type]));\r\n\r\n        // Prevent unnecessary actions\r\n        if (node[state] !== false) {\r\n\r\n            // Toggle state\r\n            if (indeterminate || !keep || keep == 'force') {\r\n                node[state] = false;\r\n            };\r\n\r\n            // Trigger callbacks\r\n            callbacks(input, checked, callback, keep);\r\n        };\r\n\r\n        // Add proper cursor\r\n        if (!node[_disabled] && !!option(node, _cursor, true)) {\r\n            parent.find('.' + _iCheckHelper).css(_cursor, 'pointer');\r\n        };\r\n\r\n        // Remove state class\r\n        parent[_remove](specific || option(node, state) || '');\r\n\r\n        // Add regular state class\r\n        parent[_add](regular || option(node, callback));\r\n    };\r\n\r\n    // Remove all traces\r\n    function tidy(node, callback) {\r\n        if ($.data(node, _iCheck)) {\r\n            var input = $(node);\r\n\r\n            // Remove everything except input\r\n            input.parent().html(input.attr('style', $.data(node, _iCheck).s || '')[_callback](callback || ''));\r\n\r\n            // Unbind events\r\n            input.off('.i').unwrap();\r\n            $(_label + '[for=\"' + node.id + '\"]').add(input.closest(_label)).off('.i');\r\n        };\r\n    };\r\n\r\n    // Get some option\r\n    function option(node, state, regular) {\r\n        if ($.data(node, _iCheck)) {\r\n            return $.data(node, _iCheck).o[state + (regular ? '' : 'Class')];\r\n        };\r\n    };\r\n\r\n    // Capitalize some string\r\n    function capitalize(string) {\r\n        return string.charAt(0).toUpperCase() + string.slice(1);\r\n    };\r\n\r\n    // Executable handlers\r\n    function callbacks(input, checked, callback, keep) {\r\n        if (!keep) {\r\n            if (checked) {\r\n                input[_callback]('ifToggled');\r\n            };\r\n\r\n            input[_callback]('ifChanged')[_callback]('if' + capitalize(callback));\r\n        };\r\n    };\r\n})(jQuery);","//minimal\r\n\r\n$(function(){\r\n    \"use strict\";\r\n    $('.minimal input').iCheck({\r\n        checkboxClass: 'icheckbox_minimal',\r\n        radioClass: 'iradio_minimal',\r\n        increaseArea: '20%' // optional\r\n    });\r\n});\r\n\r\n\r\n$(function(){\r\n    $('.minimal-red input').iCheck({\r\n        checkboxClass: 'icheckbox_minimal-red',\r\n        radioClass: 'iradio_minimal-red',\r\n        increaseArea: '20%' // optional\r\n    });\r\n});\r\n\r\n$(function(){\r\n    $('.minimal-green input').iCheck({\r\n        checkboxClass: 'icheckbox_minimal-green',\r\n        radioClass: 'iradio_minimal-green',\r\n        increaseArea: '20%' // optional\r\n    });\r\n});\r\n\r\n$(function(){\r\n    $('.minimal-blue input').iCheck({\r\n        checkboxClass: 'icheckbox_minimal-blue',\r\n        radioClass: 'iradio_minimal-blue',\r\n        increaseArea: '20%' // optional\r\n    });\r\n});\r\n\r\n$(function(){\r\n    $('.minimal-yellow input').iCheck({\r\n        checkboxClass: 'icheckbox_minimal-yellow',\r\n        radioClass: 'iradio_minimal-yellow',\r\n        increaseArea: '20%' // optional\r\n    });\r\n});\r\n\r\n\r\n$(function(){\r\n    $('.minimal-purple input').iCheck({\r\n        checkboxClass: 'icheckbox_minimal-purple',\r\n        radioClass: 'iradio_minimal-purple',\r\n        increaseArea: '20%' // optional\r\n    });\r\n});\r\n\r\n\r\n\r\n\r\n\r\n//square\r\n\r\n\r\n$(function(){\r\n    $('.square input').iCheck({\r\n        checkboxClass: 'icheckbox_square',\r\n        radioClass: 'iradio_square',\r\n        increaseArea: '20%' // optional\r\n    });\r\n});\r\n\r\n$(function(){\r\n    $('.square-red input').iCheck({\r\n        checkboxClass: 'icheckbox_square-red',\r\n        radioClass: 'iradio_square-red',\r\n        increaseArea: '20%' // optional\r\n    });\r\n});\r\n\r\n$(function(){\r\n    $('.square-green input').iCheck({\r\n        checkboxClass: 'icheckbox_square-green',\r\n        radioClass: 'iradio_square-green',\r\n        increaseArea: '20%' // optional\r\n    });\r\n});\r\n\r\n$(function(){\r\n    $('.square-blue input').iCheck({\r\n        checkboxClass: 'icheckbox_square-blue',\r\n        radioClass: 'iradio_square-blue',\r\n        increaseArea: '20%' // optional\r\n    });\r\n});\r\n\r\n$(function(){\r\n    $('.square-yellow input').iCheck({\r\n        checkboxClass: 'icheckbox_square-yellow',\r\n        radioClass: 'iradio_square-yellow',\r\n        increaseArea: '20%' // optional\r\n    });\r\n});\r\n\r\n$(function(){\r\n    $('.square-purple input').iCheck({\r\n        checkboxClass: 'icheckbox_square-purple',\r\n        radioClass: 'iradio_square-purple',\r\n        increaseArea: '20%' // optional\r\n    });\r\n});\r\n\r\n\r\n\r\n//flat\r\n\r\n$(function(){\r\n    $('.flat-red input').iCheck({\r\n        checkboxClass: 'icheckbox_flat-red',\r\n        radioClass: 'iradio_flat-red'\r\n    });\r\n});\r\n\r\n\r\n$(function(){\r\n    $('.flat-grey input').iCheck({\r\n        checkboxClass: 'icheckbox_flat-grey',\r\n        radioClass: 'iradio_flat-grey'\r\n    });\r\n});\r\n\r\n$(function(){\r\n    $('.flat-green input').iCheck({\r\n        checkboxClass: 'icheckbox_flat-green',\r\n        radioClass: 'iradio_flat-green'\r\n    });\r\n});\r\n\r\n$(function(){\r\n    $('.flat-blue input').iCheck({\r\n        checkboxClass: 'icheckbox_flat-blue',\r\n        radioClass: 'iradio_flat-blue'\r\n    });\r\n});\r\n\r\n$(function(){\r\n    $('.flat-yellow input').iCheck({\r\n        checkboxClass: 'icheckbox_flat-yellow',\r\n        radioClass: 'iradio_flat-yellow'\r\n    });\r\n});\r\n\r\n$(function(){\r\n    $('.flat-purple input').iCheck({\r\n        checkboxClass: 'icheckbox_flat-purple',\r\n        radioClass: 'iradio_flat-purple'\r\n    });\r\n});\r\n"]}