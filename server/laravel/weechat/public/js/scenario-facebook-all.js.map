{"version":3,"sources":["scenario_facebook.js","validation.js"],"names":[],"mappingsxifile":"scenario-facebook-all.js","sourcesContent":["//globe variable\r\nvar common_data         = [];\r\nvar type_text           = 'text';\r\nvar type_button         = 'button';\r\nvar type_generic        = 'generic';\r\nvar type_file           = 'file';\r\nvar type_library        = 'library';\r\nvar type_quick_replies  = 'quick_replies';\r\nvar type_api            = 'api';\r\nvar type_scenario_connect = 'scenario_connect';\r\nvar type_mail           = 'mail';\r\nvar type_api_variable_setting = 'api_variable_setting';\r\nvar max_button_block    = 3;\r\nvar max_generic_item    = 10;\r\nvar max_generic_button  = 3;\r\nvar max_quick_replies_button  = 11;\r\nvar icheck_change_event = true;\r\nvar conversation_page = false;\r\n\r\n$(function () {\r\n    if($('.scenario-edit.content_message').length) {\r\n        conversation_page = true;\r\n        $('#bot_content_type option').first().remove();\r\n    }\r\n    message_area_select(null);\r\n\r\n    ///////////////////////START ACTION USER MESAGE\r\n    //get type of bot input textarea\r\n    $('.scenario-body').on('click', '.user_scenario', function (event) {\r\n        //hide message bot area\r\n        message_area_select(false);\r\n        var messages_focus      = $('input.messages_focus'),\r\n            user_message_name   = $(this).find('.messages_user_content').attr('name');\r\n        if (messages_focus.val() != user_message_name) {\r\n            var messages_user_type = $(this).find('input.messages_user_type').val();\r\n            //set active for bot scenario\r\n            $('.scenario-body .bot_scenario, .scenario-body .user_scenario').removeClass('active');\r\n            $(this).addClass('active');\r\n            //get type from bot message and set to sliderbar data\r\n            $('#user_content_type').val(messages_user_type);\r\n            //set name user message to right slidebar\r\n            messages_focus.val(user_message_name);\r\n            //set flag icheck_change_event do not icheck change event handle below action\r\n            icheck_change_event = false;\r\n            checkContentUserMessage(messages_user_type);\r\n            setUserDataToForm();\r\n            icheck_change_event = true;\r\n        }\r\n    });\r\n\r\n    //Change select content type\r\n    $('#user_content_type').on('change', function (event) {\r\n        var user_current        = userMessageElement(),\r\n            user_current_type   = user_current.next('input.messages_user_type'),\r\n            user_input_text     = userInputText();\r\n        //change type for bot message\r\n        user_current_type.val($(this).val());\r\n        //check text type and clear content user message\r\n        user_current.val('');\r\n\r\n        user_input_text.importTags('');\r\n        setUserDataMediaDemo(true);\r\n        //set flag icheck_change_event do not icheck change event handle below action\r\n        icheck_change_event = false;\r\n        checkContentUserInput($(this).val());\r\n        icheck_change_event = true;\r\n        createTag();\r\n    });\r\n\r\n    //TEXT TYPE\r\n    //init tags input and  change value for user message\r\n    $('.message_user_area .text_group input.user_text_type').tagsInput({\r\n        'onChange' : function () {\r\n            getDataUserText();\r\n        }\r\n    });\r\n\r\n    //delete tag and re-set value to user message\r\n    $(document).on('click', '.user_scenario .tagit-close', function (event) {\r\n        var ulParent        = $(this).parent().parent(),\r\n            user_current    = userMessageElement(),\r\n            user_type       = userMessageType(),\r\n            type            = common_data['user_content_type'];\r\n        $(this).parent().remove();\r\n        /*update user input*/\r\n        //case library: remove tag and un-select that library\r\n        if(user_type == type[type_library]) {\r\n            var lib_label_del   = $(this).parent().find(\".taget-label\").html();\r\n            //LIBRARY[library_name]\r\n            lib_label_del = lib_label_del.substring(8, lib_label_del.length - 1);\r\n            //unselect and re-init tag\r\n            icheckAuto('uncheck', $(\".message_user_area .library_group input.library_list[data-name='\" + lib_label_del + \"']\"));\r\n            getDataUserFromInput(type_library);\r\n\r\n        } else {\r\n            var arr_text  = new Array(),\r\n                arr_label = $(ulParent).find(\".taget-label\");\r\n            $(arr_label).each(function (index, value) {\r\n                arr_text.push($(value).text());\r\n            });\r\n            user_current.val(arr_text.join(','));\r\n            //re-fill to input sliderbar\r\n            setUserDataToForm();\r\n        }\r\n    });\r\n\r\n    //checkbox for use nlp\r\n    $(document).on('ifChanged', '.message_user_area input.use_nlp', function (event) {\r\n        var user_message_type    = userMessageType(),\r\n            type                 = common_data['user_content_type'];\r\n\r\n        if(user_message_type == type[type_text]) {\r\n            var group_message   = $('.message_user_area .text_group');\r\n\r\n            if(group_message) {\r\n                var use_nlp = group_message.find('input.use_nlp:checked').val(),\r\n                    select_nlp = group_message.find('select.select_nlp');\r\n\r\n                if(use_nlp != void 0 && use_nlp) {\r\n                    select_nlp.removeClass('hidden');\r\n                } else {\r\n                    select_nlp.addClass('hidden');\r\n                }\r\n            }\r\n            if(icheck_change_event) {\r\n                getDataUserFromInput(type_text);\r\n            }\r\n        }\r\n    });\r\n\r\n    $('.message_user_area select.select_nlp').on('change', function(event){\r\n        var user_message_type    = userMessageType(),\r\n            type                 = common_data['user_content_type'];\r\n\r\n        if(user_message_type == type[type_text]) {\r\n            getDataUserFromInput(type_text);\r\n        }\r\n    });\r\n\r\n    //LIBRARY TYPE\r\n    /**\r\n     * select libraries event\r\n     */\r\n    $('.message_user_area .library_group input.library_list').on('ifChanged', function(event){\r\n        var user_message_type    = userMessageType(),\r\n            type                 = common_data['user_content_type'];\r\n\r\n        if(user_message_type == type[type_library] && icheck_change_event == true) {\r\n            getDataUserFromInput(type_library);\r\n        }\r\n    });\r\n\r\n    //check library when click to label\r\n    $('.message_user_area .library_group .library_label_box').on('click', function(event){\r\n        $(this).prev('.library_input_box').iCheck('toggle');\r\n    });\r\n\r\n    //API VARIABLE SETTING TYPE\r\n    $('.message_user_area .api_variable_setting_group select.api_variable').select2({\r\n        minimumResultsForSearch: -1\r\n    });\r\n    $('.message_user_area .api_variable_setting_group select.api_variable, .message_user_area .api_variable_setting_group select.select_variable').on('change', function(event){\r\n        getDataUserFromInput(type_api_variable_setting);\r\n    });\r\n\r\n    //COMMON USER TYPE\r\n    $('.message_user_area select.select_variable').on('change', function(event){\r\n        var user_message_type    = userMessageType(),\r\n            type                 = common_data['user_content_type'],\r\n            message_type         = '';\r\n\r\n        switch (user_message_type) {\r\n            case type[type_text]:\r\n                message_type    = type_text;\r\n                break;\r\n            case type[type_library]:\r\n                message_type    = type_library;\r\n                break;\r\n            case type[type_api_variable_setting]:\r\n                message_type    = type_api_variable_setting;\r\n                break;\r\n        }\r\n        if(message_type) {\r\n            getDataUserFromInput(message_type);\r\n        }\r\n    });\r\n\r\n    //checkbox for use variable\r\n    $(document).on('ifChanged', '.message_user_area input.use_variable', function (event) {\r\n        var user_message_type    = userMessageType(),\r\n            type                 = common_data['user_content_type'],\r\n            group_message        = '',\r\n            message_type         = '';\r\n\r\n        switch (user_message_type) {\r\n            case type[type_text]:\r\n                group_message   = $('.message_user_area .text_group');\r\n                message_type    = type_text;\r\n                break;\r\n            case type[type_library]:\r\n                group_message   = $('.message_user_area .library_group');\r\n                message_type    = type_library;\r\n                break;\r\n            case type[type_api_variable_setting]:\r\n                group_message   = $('.message_user_area .api_variable_setting_group');\r\n                message_type    = type_api_variable_setting;\r\n                break;\r\n        }\r\n\r\n        if(group_message) {\r\n            var use_variable = group_message.find('input.use_variable:checked').val(),\r\n                select_variable = group_message.find('select.select_variable');\r\n\r\n            if(use_variable != void 0 && use_variable) {\r\n                select_variable.removeClass('hidden');\r\n            } else {\r\n                select_variable.addClass('hidden');\r\n            }\r\n        }\r\n        if(message_type && icheck_change_event) {\r\n            getDataUserFromInput(message_type);\r\n        }\r\n    });\r\n\r\n    /**\r\n     * focus user library message when click to own answer\r\n     */\r\n    $(document).on('click', '.bot_virtual_box', function (event) {\r\n        $(this).prev('.user_scenario').click();\r\n    });\r\n\r\n    ///////////////////////START ACTION BOT MESAGE\r\n    //get type of bot input textarea\r\n    $('.scenario-body').on('click', '.bot_scenario', function (event) {\r\n        var messages_focus      = $('input.messages_focus'),\r\n            bot_message_name    = $(this).find('.messages_bot_content').attr('name');\r\n\r\n        if (messages_focus.val() != bot_message_name) {\r\n            //set active for bot scenario\r\n            $('.scenario-body .bot_scenario, .scenario-body .user_scenario').removeClass('active');\r\n            $(this).addClass('active');\r\n\r\n            var messages_bot_type = $(this).find('input.messages_bot_type').val();\r\n\r\n            //get type from bot message and set to sliderbar data\r\n            $('#bot_content_type').val(messages_bot_type);\r\n\r\n            //set name bot message to right slidebar\r\n            messages_focus.val(bot_message_name);\r\n\r\n            checkContentBotMessage(messages_bot_type);\r\n            setBotDataToForm();\r\n            setHeightSlidebar();\r\n        }\r\n    });\r\n\r\n    //Change select content type\r\n    $('#bot_content_type').on('change', function (event) {\r\n        var bot_message_current         = botMessageElement(),\r\n            bot_message_current_type    = bot_message_current.next('input.messages_bot_type');\r\n        //check text type and clear content bot message\r\n        var old_type = bot_message_current_type.val();\r\n        if(old_type != $(this).val()) {\r\n            bot_message_current.val('');\r\n        }\r\n        //change type for bot message\r\n        bot_message_current_type.val($(this).val());\r\n\r\n        setDataMediaDemo(true);\r\n        checkContentBotInput($(this).val());\r\n        setHeightSlidebar();\r\n        if ($('.conversation_index').length){\r\n            $('.fixedsidebar-content').slimscroll({\r\n                height: '250px',\r\n            });\r\n        }\r\n    });\r\n\r\n    //event add user + bot\r\n    $('.add_pattern_user').on('click', function (event) {\r\n        if(conversation_page) {\r\n            cloneBot(true);\r\n        } else {\r\n            cloneUser();\r\n            cloneBot();\r\n        }\r\n    });\r\n    //event add bot\r\n    $('.add_pattern_bot').on('click', function (event) {\r\n        cloneBot(true);\r\n    });\r\n\r\n    // add button item\r\n    $('.message_bot_area .footer_message_input .add_item_common').on('click', function (event) {\r\n        var bot_message_type    = botMessageType(),\r\n            type                = common_data['bot_content_type'];\r\n\r\n        if(bot_message_type == type[type_button]) {\r\n            addButtonBox();\r\n        } else if(bot_message_type == type[type_quick_replies]) {\r\n            addQuickRepliesBox();\r\n        } else if(bot_message_type == type[type_generic]) {\r\n            addGenericButton();\r\n        }\r\n    });\r\n\r\n    // add generic item\r\n    $('.message_bot_area .add_group_box .add_item_generic').on('click', function (event) {\r\n        createGenericBox();\r\n    });\r\n\r\n    //*** AJAX ON ***\r\n    // ajax update scenario\r\n    $('.updateScenario').on('click', function (event) {\r\n        validateMessages();\r\n        updateScenario();\r\n    });\r\n\r\n    //-----------------start set value from right sliderbar to bot message\r\n    //TEXT\r\n    $('.message_bot_area .text_group .input_text_type').on('change', function (event) {\r\n        getDataFromInput(type_text);\r\n    });\r\n\r\n    //auto suggest variable by textcomplete\r\n    var variable_list = common_data['variable_list'];\r\n    $('.message_bot_area .text_group .input_text_type').textcomplete([\r\n        {\r\n            match: /@(\\w*)$/,\r\n            search: function (term, callback) {\r\n                callback($.map(variable_list, function (element) {\r\n                    return element.indexOf(term) === 0 ? element : null;\r\n                }));\r\n            },\r\n            index: 1,\r\n            replace: function (element) {\r\n                return ['\\{\\{' + element + '}}', ''];\r\n            }\r\n        }\r\n    ], {\r\n        maxCount: 1000\r\n    });\r\n\r\n    //select file for file and generic type\r\n    $('#scenario-file-list .btn-file-select').on('click', function () {\r\n        var bot_message_type    = botMessageType(),\r\n            type                = common_data['bot_content_type'],\r\n            file_path_input     = $('#scenario-file-list #scenario_file_selected'),\r\n            file_path           = file_path_input.val();\r\n\r\n        //set file url for image input\r\n        if(file_path != '' && file_path != void 0) {\r\n            if(bot_message_type == type[type_file]) {\r\n                $('.file_group .file_url_input').val(file_path);\r\n                getDataFromInput(type_file);\r\n            } else if(bot_message_type == type[type_generic]) {\r\n                var genericActive = genericActiveElement();\r\n                genericActive.find('input.image_url').val(file_path);\r\n                getDataFromInput(type_generic);\r\n            }\r\n            //clear val file_path_input in popup file list\r\n            file_path_input.val('');\r\n        }\r\n    });\r\n    //FILE\r\n    $('.file_group .file_url_input').on('change', function (event) {\r\n        getDataFromInput(type_file);\r\n    });\r\n    $('.file_group .file_url_input').on('keypress', function (event) {\r\n        getDataFromInput(type_file);\r\n    });\r\n\r\n    //BUTTON\r\n    $(document).on('keypress', '.button_group input', function (event) {\r\n        getDataFromInput(type_button);\r\n    });\r\n    $(document).on('change', '.button_group input, .button_group select', function (event) {\r\n        getDataFromInput(type_button);\r\n    });\r\n    //checkbox for use variable in button\r\n    $(document).on('ifChanged', '.button_group #btn_is_variable', function (event) {\r\n        var btn_group    = $('.button_group'),\r\n            is_variable = btn_group.find('input#btn_is_variable:checked').val(),\r\n            variable    = btn_group.find('select.button_variable');\r\n        if(is_variable != void 0 && is_variable) {\r\n            variable.removeClass('hidden');\r\n        } else {\r\n            variable.addClass('hidden');\r\n        }\r\n        if(icheck_change_event) {\r\n            getDataFromInput(type_button);\r\n        }\r\n    });\r\n\r\n    //GENERIC\r\n    $(document).on('keypress', '.generic_box input', function (event) {\r\n        getDataFromInput(type_generic);\r\n    });\r\n    $(document).on('change', '.generic_box input, .generic_box select', function (event) {\r\n        getDataFromInput(type_generic);\r\n    });\r\n    //--------------------------------end set value from right sliderbar to message box\r\n\r\n    //QUICK REPLIES\r\n    //checkbox for use variable in quick reply\r\n    $(document).on('ifChanged', '.quick_replies_group #qr_is_variable', function (event) {\r\n        var qr_group    = $('.quick_replies_group'),\r\n            is_variable = qr_group.find('input#qr_is_variable:checked').val(),\r\n            variable    = qr_group.find('select.quick_replies_variable');\r\n        if(is_variable != void 0 && is_variable) {\r\n            variable.removeClass('hidden');\r\n        } else {\r\n            variable.addClass('hidden');\r\n        }\r\n        checkVariableTextBox();\r\n        if(icheck_change_event) {\r\n            getDataFromInput(type_quick_replies);\r\n        }\r\n\r\n        //show, hide button_variable_code_box in quickreply group\r\n        function checkVariableTextBox() {\r\n            var template_quick_replies = common_data['template_quick_replies'];\r\n\r\n            qr_group.find('.quick_replies_box').each(function (index, element) {\r\n                var button_sub_type = $(this).find('.button_type_box select.button_sub_type').val(),\r\n                    btn_variable_text_box = $(this).find('.button_variable_code_box');\r\n\r\n                if(is_variable != void 0 && is_variable && button_sub_type == template_quick_replies['text']) {\r\n                    btn_variable_text_box.removeClass('hidden');\r\n                } else {\r\n                    btn_variable_text_box.addClass('hidden');\r\n                }\r\n            });\r\n        }\r\n    });\r\n    //checkbox for use scenario in button quick reply\r\n    $(document).on('ifChanged', '.quick_replies_group input.qr_is_scenario', function (event) {\r\n        var qr_box      = $(this).parents('.quick_replies_box'),\r\n            is_scenario = qr_box.find('input.qr_is_scenario:checked').val(),\r\n            scenario    = qr_box.find('select.button_sub_scenario');\r\n\r\n        if(is_scenario != void 0 && is_scenario) {\r\n            scenario.removeClass('hidden');\r\n        } else {\r\n            scenario.addClass('hidden');\r\n        }\r\n        if(icheck_change_event) {\r\n            getDataFromInput(type_quick_replies);\r\n        }\r\n    });\r\n    //checkbox for use is_keyword_matching in quick reply\r\n    $(document).on('ifChanged', '.quick_replies_group #user_keyword_matching', function (event) {\r\n        if(icheck_change_event) {\r\n            getDataFromInput(type_quick_replies);\r\n        }\r\n    });\r\n    $(document).on('keypress', '.quick_replies_group input', function (event) {\r\n        getDataFromInput(type_quick_replies);\r\n    });\r\n    $(document).on('change', '.quick_replies_group input, .quick_replies_group select', function (event) {\r\n        getDataFromInput(type_quick_replies);\r\n    });\r\n    $(document).on('change', '.quick_replies_group select.button_sub_type', function (event) {\r\n        var type = common_data['template_quick_replies'],\r\n            box  = $(this).parents('.quick_replies_box');\r\n        if($(this).val() == type['location']) {\r\n            box.find('.button_title_box, .button_scenario_box, .button_image_box').addClass('hidden');\r\n            box.find('input.button_sub_title').removeClass('validate-require');\r\n        } else {\r\n            box.find('.button_title_box, .button_scenario_box, .button_image_box').removeClass('hidden');\r\n            box.find('input.button_sub_title').addClass('validate-require');\r\n        }\r\n        checkButtonVariableTextBox();\r\n\r\n        //show, hide button_variable_code_box in button box\r\n        function checkButtonVariableTextBox() {\r\n            var is_variable = $('.quick_replies_group input#qr_is_variable:checked').val(),\r\n                btn_variable_text_box = box.find('.button_variable_code_box'),\r\n                button_sub_type = box.find('.button_type_box select.button_sub_type').val();\r\n\r\n            if(is_variable != void 0 && is_variable && button_sub_type == type['text']) {\r\n                btn_variable_text_box.removeClass('hidden');\r\n            } else {\r\n                btn_variable_text_box.addClass('hidden');\r\n            }\r\n        }\r\n    });\r\n\r\n    //API\r\n    $('.message_bot_area .api_group select.api_select').select2({\r\n        minimumResultsForSearch: -1\r\n    });\r\n    //select api event\r\n    $('.message_bot_area .api_group select.api_select').on('change', function(event){\r\n        getDataFromInput(type_api);\r\n    });\r\n\r\n\r\n    //SCENARIO CONNECT\r\n    $('.message_bot_area .scenario_connect_group select.scenario_select').select2({\r\n        minimumResultsForSearch: -1\r\n    });\r\n    //select api event\r\n    $('.message_bot_area .scenario_connect_group select.scenario_select').on('change', function(event){\r\n        getDataFromInput(type_scenario_connect);\r\n    });\r\n\r\n    //MAIL\r\n    $('.message_bot_area .mail_group select.mail_select').select2({\r\n        minimumResultsForSearch: -1\r\n    });\r\n    //select api event\r\n    $('.message_bot_area .mail_group select.mail_select').on('change', function(event){\r\n        getDataFromInput(type_mail);\r\n    });\r\n\r\n    //delete user message box\r\n    $(document).on('click', '.user_scenario .delete_user_box', function (event) {\r\n        deleteBotVirtual();\r\n        $(this).parent('.user_scenario').remove();\r\n        message_area_select(null);\r\n        generateNameMessageBox();\r\n    });\r\n\r\n    //delete bot message box\r\n    $(document).on('click','.bot_scenario .delete_bot_box',function(e){\r\n        $(this).parent('.bot_scenario').remove();\r\n        message_area_select(null);\r\n        generateNameMessageBox();\r\n        $('input.messages_focus').val('');\r\n    });\r\n\r\n    // remove button block\r\n    $(document).on(\"click\", '.btn_box .delete_btn_box', function (event) {\r\n        if($('.button_group .button_container .btn_box').length > 1) {\r\n            $(this).parents('.btn_box').remove();\r\n            checkButtonBox();\r\n            getDataFromInput(type_button);\r\n        }\r\n    });\r\n\r\n    // remove generic block\r\n    $(document).on(\"click\", '.generic_box .delete_generic_box', function (event) {\r\n        if($('.generic_container .generic_box').length > 1) {\r\n            $(this).parents('.generic_box').remove();\r\n            //----Carousel process\r\n            //delete generic indicators item of generic_box\r\n            $('.generic_indicators li.active').remove();\r\n            //re-set index for generic indicators\r\n            $('.generic_indicators li').each(function (index, value) {\r\n                $(this).attr('data-slide-to', index);\r\n            });\r\n            //set active for first indicators and first generic_box\r\n            $('.generic_indicators li:first-child').addClass('active');\r\n            $('.generic_container .generic_box:first-child').addClass('active');\r\n            checkCarouselSlide();\r\n            ////////////////////\r\n            checkGenericBox();\r\n            getDataFromInput(type_generic);\r\n            check_add_item_common();\r\n            setHeightSlidebar();\r\n        }\r\n    });\r\n\r\n    // remove quick replies block\r\n    $(document).on(\"click\", '.quick_replies_group .delete_btn_box', function (event) {\r\n        if($('.quick_replies_group .quick_replies_box').length > 1) {\r\n            $(this).parents('.quick_replies_box').remove();\r\n            checkQuickReplyButtonBox();\r\n            getDataFromInput(type_quick_replies);\r\n        }\r\n    });\r\n\r\n    // remove generic button block\r\n    $(document).on(\"click\", '.button_type_container .delete_btn_box', function (event) {\r\n        var generic_element = $(this).parents('.generic_box');\r\n        if(generic_element.find('.button_type_container').length > 0) {\r\n            $(this).parents('.button_type_container').remove();\r\n            checkGenericButtonBox();\r\n            getDataFromInput(type_generic);\r\n        }\r\n    });\r\n\r\n    //add a message block if not exist any user message and bot message\r\n    if(!$('.scenario_block .user_scenario').length && !$('.scenario_block .bot_scenario').length) {\r\n        $('.add_pattern_bot').click();\r\n    }\r\n\r\n    //re-sort position message box\r\n    $('.scenario_block').sortable({\r\n        items: \".message_box\",\r\n        cancel: \".bot_media_demo, .user_form_box\",\r\n        activate: function(event, ui) {\r\n            $('.scenario_block .bot_virtual_box').remove();\r\n        },\r\n        stop: function(event, ui) {\r\n            //re-generate bot for message library\r\n            generateBotVirtual();\r\n            generateNameMessageBox();\r\n            //update name of message box focusing to messages_focus input\r\n            var msg_focusing = getMessageBoxActive(),\r\n                msg_name     = '';\r\n            if(msg_focusing.hasClass('user_scenario')) {\r\n                msg_name = msg_focusing.find('input.messages_user_content').attr('name');\r\n            } else if(msg_focusing.hasClass('bot_scenario')) {\r\n                msg_name = msg_focusing.find('textarea.messages_bot_content').attr('name');\r\n            }\r\n            $('input.messages_focus').val(msg_name);\r\n        }\r\n    });\r\n\r\n    //generate virtual bot message for user type\r\n    generateBotVirtual();\r\n\r\n    //generate name for input message block\r\n    generateNameMessageBox();\r\n\r\n    //carousel slide when select generic message\r\n    $('.generic_carousel').bind('slid.bs.carousel', function (e) {\r\n        checkCarouselSlide();\r\n        checkGenericButtonBox();\r\n    });\r\n    uploadFile();\r\n\r\n    //disable submit message form\r\n    $(\".scenario-edit form.scenarioForm\").submit(function (e) {\r\n        e.preventDefault();\r\n    });\r\n});\r\n\r\n/**\r\n * get data from slidebar input for message box by type\r\n * @param type\r\n */\r\nfunction getDataUserFromInput(type) {\r\n    switch (type) {\r\n        case type_text: getDataUserText(); break;\r\n        case type_library: getDataUserLibrary(); break;\r\n        case type_api_variable_setting: getDataUserApiVariableSetting(); break;\r\n    }\r\n    setUserVariable(type);\r\n    setUserDataMediaDemo();\r\n}\r\n\r\n/**\r\n * get data text fill to message box\r\n */\r\nfunction getDataUserText() {\r\n    var user_message = userMessageElement(),\r\n        user_input_text = userInputText();\r\n    user_message.val(user_input_text.val());\r\n    setUserNlp(type_text);\r\n    createTag();\r\n}\r\n\r\n/**\r\n * get option selected to user input\r\n */\r\nfunction getDataUserLibrary() {\r\n    var user_current    = userMessageElement(),\r\n        type = common_data['user_content_type'],\r\n        lib_value       = $.map($('.message_user_area .library_group input.library_list:checked'), function(c){return c.value;});\r\n\r\n    if(lib_value.length > 0) {\r\n        lib_value = lib_value.join(',');\r\n    }\r\n    user_current.val(lib_value);\r\n    createTag();\r\n}\r\n\r\n/**\r\n * get data api variable setting fill to message box\r\n */\r\nfunction getDataUserApiVariableSetting() {\r\n    var user_message = userMessageElement(),\r\n        api_variable = apiVariableSettingElement();\r\n\r\n    user_message.val(api_variable.val());\r\n}\r\n\r\n/**\r\n * create tag by value in active input user message\r\n */\r\nfunction createTag() {\r\n    var user_box        = userMessageBoxElement(),\r\n        user_type       = userMessageType(),\r\n        user_value      = userMessageContent(),\r\n        tagit_box       = user_box.find('ul.tagit'),\r\n        type            = common_data['user_content_type'];\r\n\r\n    tagit_box.find('li').remove();\r\n    if(user_value) {\r\n        $(user_value.split(',')).each(function (index, value) {\r\n            if(value) {\r\n                value = $.trim(value);\r\n                var cloneChar = $('.scenario_block_origin .tagit-choice-block .tagit-choice').clone();\r\n                //if type is library then get label to show tag\r\n                if(user_type == type[type_library]) {\r\n                    var library_item   = libraryListElement(value),\r\n                        library_label  = library_item.data('name'),\r\n                        label_bot_smg  = $('.scenario_block_origin .bot_virtual_box .bot_library_view').data('label');\r\n                    value = label_bot_smg + '[' + library_label + ']';\r\n                }\r\n                cloneChar.find(\".taget-label\").text(value);\r\n                tagit_box.append(cloneChar);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * set select variable in user message\r\n * @param user_message_type\r\n */\r\nfunction setUserVariable(user_message_type) {\r\n    var group_message   = '',\r\n        select_variable = '';\r\n\r\n    switch (user_message_type) {\r\n        case type_text:\r\n            group_message   = $('.message_user_area .text_group');\r\n            break;\r\n        case type_library:\r\n            group_message   = $('.message_user_area .library_group');\r\n            break;\r\n        case type_api_variable_setting:\r\n            group_message   = $('.message_user_area .api_variable_setting_group');\r\n            break;\r\n    }\r\n\r\n    //get variable to imput message\r\n    var use_variable = group_message.find('input.use_variable:checked').val();\r\n    if(use_variable != void 0 && use_variable && group_message.find('select.select_variable').val()) {\r\n        select_variable = group_message.find('select.select_variable').val();\r\n    }\r\n    userMessageVariable(select_variable);\r\n}\r\n\r\n/**\r\n * set select nlp in user message\r\n * @param user_message_type\r\n */\r\nfunction setUserNlp(user_message_type) {\r\n    var group_message   = '',\r\n        select_nlp = '';\r\n\r\n    switch (user_message_type) {\r\n        case type_text:\r\n            group_message   = $('.message_user_area .text_group');\r\n            break;\r\n        case type_library:\r\n            group_message   = $('.message_user_area .library_group');\r\n            break;\r\n        case type_api_variable_setting:\r\n            group_message   = $('.message_user_area .api_variable_setting_group');\r\n            break;\r\n    }\r\n\r\n    //get variable to imput message\r\n    var use_nlp = group_message.find('input.use_nlp:checked').val();\r\n    if(use_nlp != void 0 && use_nlp && group_message.find('select.select_nlp').val()) {\r\n        select_nlp = group_message.find('select.select_nlp').val();\r\n    }\r\n    userMessageNlp(select_nlp);\r\n}\r\n\r\n/**\r\n * set data for common variable\r\n */\r\nfunction setDataCommon(key, value) {\r\n    common_data[key] = value;\r\n}\r\n\r\n//add new user box\r\nfunction cloneUser() {\r\n\tvar clone = $('.scenario_block_origin .user_scenario').clone();\r\n\t$('.scenario_block').append(clone);\r\n}\r\n\r\n//add new bot box\r\nfunction cloneBot(focus) {\r\n\tvar clone = $('.scenario_block_origin .bot_scenario').clone();\r\n    $('.scenario_block').append(clone);\r\n    //reset name for mesage input\r\n    generateNameMessageBox();\r\n    //focus to new bot box\r\n    if(focus != void 0 && focus) {\r\n        clone.click();\r\n    } else {\r\n        $('.scenario_block .message_box.user_scenario').last().click();\r\n    }\r\n}\r\n\r\n//add new bot library box after user library mesage\r\nfunction cloneBotVirtual(after_elm, type_message) {\r\n    if(after_elm == void 0 || after_elm == '') {\r\n        var user_message = userMessageBoxElement();\r\n        after_elm = user_message.parents('.user_scenario');\r\n    }\r\n    if(!after_elm.next().hasClass('bot_virtual_box')) {\r\n        var clone_bot = $('.scenario_block_origin .bot_virtual_box').clone();\r\n        after_elm.after(clone_bot);\r\n    }\r\n\r\n    //re show, hide for each type user message\r\n    var type = common_data['user_content_type'],\r\n        bot_library_view = after_elm.next().find('.bot_library_view'),\r\n        bot_api_view = after_elm.next().find('.bot_api_variable_setting_view');\r\n    switch (type_message) {\r\n        case type[type_library]:\r\n            bot_library_view.removeClass('hidden');\r\n            bot_api_view.addClass('hidden');\r\n            break;\r\n        case type[type_api_variable_setting]:\r\n            bot_library_view.addClass('hidden');\r\n            bot_api_view.removeClass('hidden');\r\n            break;\r\n    }\r\n}\r\n\r\n//Generate for all bot library\r\nfunction generateBotVirtual() {\r\n    var type = common_data['user_content_type'];\r\n    $('.scenario_block .user_scenario').each(function (i, e) {\r\n        var bot_type = $(this).find('input.messages_user_type').val();\r\n        if(bot_type && (bot_type == type[type_library] || bot_type == type[type_api_variable_setting])) {\r\n            cloneBotVirtual($(this), bot_type);\r\n        }\r\n    });\r\n}\r\n\r\n//add new bot virtual box after user library mesage\r\nfunction deleteBotVirtual() {\r\n    var user_message    = userMessageBoxElement();\r\n    user_message.parents('.user_scenario').next('.bot_virtual_box').remove();\r\n}\r\n\r\n/**\r\n * add new button block\r\n */\r\nfunction addButtonBox() {\r\n    if($('.button_group .button_container .btn_box').length < max_button_block) {\r\n        var clone = $('.scenario_block_origin .btn_box').clone();\r\n        $('.button_group .button_container').append(clone);\r\n        checkButtonBox();\r\n    }\r\n}\r\n\r\n/**\r\n * add new generic child button\r\n */\r\nfunction addGenericButton() {\r\n    var generic_active = genericActiveElement();\r\n    if(generic_active.find('.button_type_container').length < max_generic_button) {\r\n        var clone_button = $('.scenario_block_origin .generic_button_template .button_type_container').clone();\r\n        generic_active.find('.generic_button_container').append(clone_button);\r\n        checkGenericButtonBox();\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * add new quick reply block\r\n */\r\nfunction addQuickRepliesBox() {\r\n    if($('.quick_replies_group .quick_replies_box').length < max_quick_replies_button) {\r\n        var is_variable = $('.quick_replies_group input#qr_is_variable:checked').val(),\r\n            clone = $('.scenario_block_origin .quick_replies_box').clone();\r\n\r\n        if(is_variable != void 0 && is_variable) {\r\n            clone.find('.button_variable_code_box').removeClass('hidden');\r\n        }\r\n        $('.quick_replies_group .quick_replies_container').append(clone);\r\n        //re-init icheck\r\n        initIcheck($('.quick_replies_group input.qr_is_scenario'));\r\n\r\n        checkQuickReplyButtonBox();\r\n    }\r\n}\r\n\r\n/**\r\n * add new generic block\r\n */\r\nfunction createGenericBox() {\r\n    if($('.generic_group .generic_container .generic_box').length < max_generic_item) {\r\n        var clone = $('.scenario_block_origin .generic_box').clone();\r\n        $('.generic_container').append(clone);\r\n        checkGenericBox();\r\n\r\n        //------Carousel process\r\n        //param false: set active for tem\r\n        addCarouselIndicator('generic_indicators', false);\r\n        checkCarouselSlide();\r\n\r\n        //check hide, show button add new button for generic\r\n        checkGenericButtonBox();\r\n    }\r\n}\r\n\r\nfunction uploadFile() {\r\n    $(document).on('click', '.upload_image', function () {\r\n        var box_message = $(this).parents('.file_select_box').find('.box_message'),\r\n            allowdtypes = $(this).data('image_type'),\r\n            max_size_image = 40, //Mb\r\n            max_size_video = 40; //Mb\r\n\r\n        allowdtypes = (allowdtypes != void 0 && allowdtypes != '') ? allowdtypes : 'jpeg,jpg,png,gif,mp4,pdf';\r\n        allowdtypes = allowdtypes.split(',');\r\n        // image: jpeg,jpg,png,gif\r\n        // video: mp4\r\n        // file: pdf\r\n\r\n        $(this).fileupload({\r\n            dropZone: $(this),\r\n            add: function (e, data) {\r\n                setMesssage(null);\r\n                var data_file_upload = data.files[0];\r\n                var error_name = '';\r\n                var fileType = data_file_upload.name.split('.').pop().toLowerCase();\r\n                var max_size_file = (fileType == 'mp4') ? max_size_video : max_size_image;\r\n\r\n                if(allowdtypes.indexOf(fileType) < 0) {\r\n                    error_name = $(this).data('error_type');\r\n                    error_name = error_name.replace(':values', allowdtypes.join(', '));\r\n\r\n                } else if (data_file_upload.size > max_size_file*1024*1024) {//Byte\r\n                    error_name = $(this).data('error_size');\r\n                    error_name = error_name.replace(':max', max_size_file*1024); //Kb\r\n                }\r\n\r\n                if(error_name != '') {\r\n                    setMesssage(error_name, 1, box_message, true);\r\n                }else{\r\n                    data.submit();\r\n                }\r\n            },fail:function(e, data){\r\n                var errors = $.parseJSON(data.jqXHR.responseText);\r\n                if(errors.error != void 0 && errors.error != '') {\r\n                    setMesssage(errors.error , 1, box_message, true);\r\n                }\r\n            },success:function (data) {\r\n                if(data != void 0){\r\n                    if(data.success) {\r\n                        if(data.path_file != void 0){\r\n                            $('#scenario-file-list #scenario_file_selected').val(data.path_file);\r\n                            $('#scenario-file-list .btn-file-select').click();\r\n                            setMesssage(data.success_mess, 2,box_message, true);\r\n                        }\r\n                    } else {\r\n                        var message = '';\r\n                        var errors = data.errors;\r\n                        for(var key in errors){\r\n                            message += errors[key]\r\n                        }\r\n                        setMesssage(message, 1, box_message, true);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\n// set file size\r\nfunction formatFileSize(bytes) {\r\n    if (typeof bytes !== 'number') {\r\n        return '';\r\n    }\r\n    if (bytes >= 1000000000) {\r\n        return (bytes / 1000000000).toFixed(2) + ' GB';\r\n    }\r\n    if (bytes >= 1000000) {\r\n        return (bytes / 1000000).toFixed(2) + ' MB';\r\n    }\r\n    return (bytes / 1000).toFixed(2) + ' KB';\r\n}\r\n\r\n//add Carousel indicators follow generic item\r\nfunction addCarouselIndicator(parent_class, first_active) {\r\n    $('.' + parent_class).append('<li data-slide-to=\"0\" data-target=\"#c-slide\"></li>');\r\n\r\n    //re-set index for generic indicators\r\n    $('.generic_indicators li').each(function (index, value) {\r\n        $(this).attr('data-slide-to', index);\r\n    });\r\n    //set active for first indicators and first generic_box\r\n    var indicator = $('.generic_indicators'),\r\n        container = $('.generic_container');\r\n\r\n    indicator.find('li').removeClass('active');\r\n    container.find('.generic_box').removeClass('active');\r\n    if(first_active) {\r\n        indicator.find('li:first-child').addClass('active');\r\n        container.find('.generic_box:first-child').addClass('active');\r\n    } else {\r\n        indicator.find('li:last-child').addClass('active');\r\n        container.find('.generic_box:last-child').addClass('active');\r\n    }\r\n}\r\n\r\n/**\r\n * generate name for user and bot message input\r\n */\r\nfunction generateNameMessageBox() {\r\n    var position        = 0,\r\n        message_type    = common_data['message_type'];\r\n    //set index (position) for mesage block\r\n    $('.scenario_block').children().each(function (index, element) {\r\n        if($(this).hasClass('user_scenario')) {\r\n            var prefix_user = 'message[' + message_type['user'] + '][' + position + ']';\r\n            $(this).find('.messages_user_content').attr('name', prefix_user + '[content]');\r\n            $(this).find('.messages_user_type').attr('name', prefix_user + '[type]');\r\n            $(this).find('.messages_user_variable').attr('name', prefix_user + '[variable]');\r\n            $(this).find('.messages_user_nlp').attr('name', prefix_user + '[nlp]');\r\n            position++;\r\n        }\r\n        if($(this).hasClass('bot_scenario')) {\r\n            var prefix_bot = 'message[' + message_type['bot'] + '][' + position + ']';\r\n            $(this).find('.messages_bot_content').attr('name', prefix_bot + '[content]');\r\n            $(this).find('.messages_bot_type').attr('name', prefix_bot + '[type]');\r\n            position++;\r\n        }\r\n    });\r\n}\r\n\r\n//hide, show add_group_box button\r\nfunction checkAddGroupButtonBox() {\r\n    var add_group_btn       = $('.message_bot_area .add_group_box'),\r\n        bot_message_type    = botMessageType(),\r\n        type                = common_data['bot_content_type'],\r\n        item_btn_count,\r\n        max_num;\r\n\r\n    if(bot_message_type == type[type_generic]) {\r\n        item_btn_count      = $('.generic_group .generic_container .generic_box').length;\r\n        max_num             = max_generic_item;\r\n    }\r\n    if(item_btn_count >= max_num) {\r\n        add_group_btn.hide();\r\n    } else {\r\n        add_group_btn.show();\r\n    }\r\n}\r\n\r\n//hide, show by check number button box\r\nfunction checkButtonBox() {\r\n    var button_box_count    = $('.button_group .button_container .btn_box').length,\r\n        delete_button       = $('.message_container_input .btn_box .delete_btn_box');\r\n    //show, hide delete button box\r\n    if(button_box_count <= 1) {\r\n        delete_button.hide();\r\n    } else {\r\n        delete_button.show();\r\n    }\r\n    check_add_item_common();\r\n}\r\n\r\n//hide, show by check number generic button box\r\nfunction checkGenericButtonBox() {\r\n    var button_box          = genericActiveElement(),\r\n        button_box_count    = $(button_box).find('.generic_button_container .button_type_container').length,\r\n        delete_button       = $(button_box).find('.delete_btn_box');\r\n    //show, hide delete button\r\n    if(button_box_count <= 0) {\r\n        delete_button.hide();\r\n    } else {\r\n        delete_button.show();\r\n    }\r\n    check_add_item_common();\r\n}\r\n\r\n//hide, show by check number quick replies button box\r\nfunction checkQuickReplyButtonBox() {\r\n    var button_box_count    = $('.quick_replies_group .quick_replies_box').length,\r\n        delete_button       = $('.quick_replies_group .delete_btn_box');\r\n    //show, hide delete button box\r\n    if(button_box_count <= 1) {\r\n        delete_button.hide();\r\n    } else {\r\n        delete_button.show();\r\n    }\r\n    check_add_item_common();\r\n}\r\n\r\n//show, hide add new button for button type and generic type\r\nfunction check_add_item_common() {\r\n    var add_item_common     = $('.footer_message_input .add_item_common'),\r\n        bot_message_type    = botMessageType(),\r\n        type                = common_data['bot_content_type'],\r\n        item_btn_count,\r\n        max_num;\r\n\r\n    if(bot_message_type == type[type_button]) {\r\n        item_btn_count  = $('.button_group .button_container .btn_box').length;\r\n        max_num         = max_button_block;\r\n    } else if(bot_message_type == type[type_quick_replies]) {\r\n        item_btn_count  = $('.quick_replies_group .quick_replies_box').length;\r\n        max_num         = max_quick_replies_button;\r\n    } else if(bot_message_type == type[type_generic]) {\r\n        var genericActive   = genericActiveElement();\r\n        item_btn_count      = genericActive.find('.generic_button_container .button_type_container').length;\r\n        max_num             = max_generic_button;\r\n    }\r\n    if(item_btn_count >= max_num) {\r\n        add_item_common.hide();\r\n    } else {\r\n        add_item_common.show();\r\n    }\r\n}\r\n\r\n//hide, show by check number button box\r\nfunction checkGenericBox() {\r\n    var generic_box_count   = $('.generic_container .generic_box').length,\r\n        delete_button       = $('.generic_box .delete_generic_box');\r\n\r\n    //show, hide delete generic box\r\n    if(generic_box_count <= 1) {\r\n        delete_button.hide();\r\n    } else {\r\n        delete_button.show();\r\n    }\r\n    checkAddGroupButtonBox();\r\n}\r\n\r\n/**\r\n * change bot text type input\r\n * @returns {*|jQuery|HTMLElement}\r\n */\r\nfunction botTextTypeInput(value) {\r\n    var input = $('.message_bot_area .text_group .input_text_type');\r\n    if(value != void 0) {\r\n        input.val(value);\r\n    }\r\n    return input;\r\n}\r\n\r\n/**\r\n * set value bot message from input text\r\n * @param value\r\n */\r\nfunction changeDataBotMessage(value) {\r\n    var bot_message = botMessageElement();\r\n    bot_message.val(value);\r\n}\r\n\r\n/**\r\n * get message active by fucusing\r\n * @returns {*|jQuery|HTMLElement}\r\n */\r\nfunction getMessageBoxActive() {\r\n    return $('.scenario_block .message_box.active');\r\n}\r\n\r\n/**\r\n * return bot message content focusing\r\n * @returns {*}\r\n */\r\nfunction botMessageContent() {\r\n    var bot_input = botMessageElement();\r\n    return bot_input.val();\r\n}\r\n\r\n/**\r\n * return bot message type element\r\n * @returns {*}\r\n */\r\nfunction botMessageType() {\r\n    var bot_box    = botMessageBoxElement(),\r\n        bot_type   = bot_box.find('input.messages_bot_type').val();\r\n    return bot_type;\r\n}\r\n\r\n/**\r\n * return bot message element\r\n */\r\nfunction botMessageElement() {\r\n    return $(\".bot_scenario textarea[name='\" + $('input.messages_focus').val() + \"']\");\r\n}\r\n\r\n/**\r\n * return bot message box\r\n */\r\nfunction botMessageBoxElement() {\r\n    var bot_input = botMessageElement();\r\n    return bot_input.parents('.bot_form_box');\r\n}\r\n\r\n/**\r\n * return current active generic\r\n */\r\nfunction genericActiveElement() {\r\n    return $('.generic_group .generic_box.active');\r\n}\r\n\r\n/**\r\n * return text input of user message\r\n * @returns {*|jQuery|HTMLElement}\r\n */\r\nfunction userInputText() {\r\n    return $('.message_user_area .text_group input.user_text_type');\r\n}\r\n\r\n/**\r\n * return user message content focusing\r\n * @returns {*}\r\n */\r\nfunction userMessageContent() {\r\n    var user_input = userMessageElement();\r\n    return user_input.val();\r\n}\r\n\r\n/**\r\n * return user message type element\r\n * @returns {*}\r\n */\r\nfunction userMessageType() {\r\n    var user_message = userMessageBoxElement(),\r\n        user_type    = user_message.find('input.messages_user_type').val();\r\n    return user_type;\r\n}\r\n\r\n/**\r\n * return user message element\r\n */\r\nfunction userMessageElement() {\r\n    return $(\".user_scenario input[name='\" + $('input.messages_focus').val() + \"']\");\r\n}\r\n\r\n/**\r\n * return user message box\r\n */\r\nfunction userMessageBoxElement() {\r\n    var user_message = userMessageElement();\r\n    return user_message.parents('.user_form_box');\r\n}\r\n\r\n\r\n/**\r\n * return user message variable focusing\r\n * @returns {*}\r\n */\r\nfunction userMessageVariable(value) {\r\n    var user_message = userMessageBoxElement(),\r\n        variable_elm = user_message.find('input.messages_user_variable');\r\n    if(value != void 0) {\r\n        return variable_elm.val(value);\r\n    }\r\n    return variable_elm.val();\r\n}\r\n\r\n/**\r\n * return user message nlp focusing\r\n * @returns {*}\r\n */\r\nfunction userMessageNlp(value) {\r\n    var user_message = userMessageBoxElement(),\r\n        nlp_elm = user_message.find('input.messages_user_nlp');\r\n    if(value != void 0) {\r\n        return nlp_elm.val(value);\r\n    }\r\n    return nlp_elm.val();\r\n}\r\n\r\n/**\r\n * return list library checkbox element\r\n * @returns {*|jQuery|HTMLElement}\r\n */\r\nfunction libraryListElement(value) {\r\n    if(value != void 0 && value != '') {\r\n        return $(\".message_user_area .library_group input.library_list[value='\" + value + \"']\");\r\n    }\r\n    return $('.message_user_area .library_group input.library_list');\r\n}\r\n\r\n/**\r\n * return api variable select element\r\n * @returns {*|jQuery|HTMLElement}\r\n */\r\nfunction apiVariableSettingElement(value) {\r\n    var api_variable = $('.message_user_area .api_variable_setting_group select.api_variable');\r\n    if(value != void 0 && value != '') {\r\n        return api_variable.val(value).trigger('change.select2');\r\n    }\r\n    return api_variable;\r\n}\r\n\r\n/**\r\n * check or uncheck library item\r\n * @param event\r\n * @param element\r\n * @returns {*|jQuery|HTMLElement}\r\n */\r\nfunction icheckAuto(event, element) {\r\n    if(element != void 0 && element != '') {\r\n        if(event == 'check') {\r\n            element.iCheck('check');\r\n        } else if(event == 'uncheck') {\r\n            element.iCheck('uncheck');\r\n        }\r\n\r\n    }\r\n}\r\n\r\n/**\r\n * @param value\r\n */\r\nfunction apiElement(value) {\r\n    var api_select = $(\".message_bot_area .api_group select.api_select\");\r\n    if(value != void 0 && value != '') {\r\n        return api_select.val(value).trigger('change.select2');\r\n    }\r\n    return api_select;\r\n}\r\n\r\n/**\r\n * @param value\r\n */\r\nfunction scenarioConnectElement(value) {\r\n    var scenario_select = $('.message_bot_area .scenario_connect_group select.scenario_select');\r\n    if(value != void 0 && value != '') {\r\n        return scenario_select.val(value).trigger('change.select2');\r\n    }\r\n    return scenario_select;\r\n}\r\n\r\n/**\r\n * @param value\r\n */\r\nfunction mailElement(value) {\r\n    var mail_select = $('.message_bot_area .mail_group select.mail_select');\r\n    if(value != void 0 && value != '') {\r\n        return mail_select.val(value).trigger('change.select2');\r\n    }\r\n    return mail_select;\r\n}\r\n\r\n/**\r\n * show, hide box message and button preview\r\n */\r\nfunction checkViewMediaDemo() {\r\n    var bot_box  = botMessageBoxElement(),\r\n        bot_type = botMessageType(),\r\n        type     = common_data['bot_content_type'];\r\n\r\n    //show if is not api or scenario connect type\r\n    var preview = bot_box.find('.preview');\r\n    if (bot_type == type[type_text] || bot_type == type[type_api] || bot_type == type[type_scenario_connect] || bot_type == type[type_mail]) {\r\n        preview.addClass('hidden');\r\n    } else {\r\n        preview.removeClass('hidden');\r\n    }\r\n}\r\n\r\n/**\r\n * get data from slidebar input for message box by type\r\n * @param type\r\n */\r\nfunction getDataFromInput(type) {\r\n    switch (type) {\r\n        case type_text:             getDataText(); break;\r\n        case type_button:           getDataButton(); break;\r\n        case type_generic:          getDataGeneric(); break;\r\n        case type_file:             getDataFile(); break;\r\n        case type_quick_replies:    getDataQuickReply(); break;\r\n        case type_api:              getDataApi(); break;\r\n        case type_scenario_connect: getDataScenarioConnect(); break;\r\n        case type_mail:             getDataMail(); break;\r\n    }\r\n    //set title for button demo in message content box\r\n    if(type != type_file) {\r\n        setDataMediaDemo();\r\n    }\r\n}\r\n\r\n/**\r\n * get text data to json and fill to message box\r\n */\r\nfunction getDataText() {\r\n    var text_input = botTextTypeInput(),\r\n        text_input = text_input.val();\r\n    var data = {\r\n        'message' : {\r\n            'text' : text_input\r\n        }\r\n    };\r\n    data = JSON.stringify(data);\r\n    changeDataBotMessage(data);\r\n}\r\n\r\n/**\r\n * get button data to json and fill to message box\r\n */\r\nfunction getDataButton() {\r\n    var button_box              = $('.button_group .button_container'),\r\n        button_title            = button_box.find('input.button_title').val(),\r\n        template_button         = common_data['template_button'],\r\n        template_button_flip    = common_data['template_button_flip'],\r\n        variable_id             = '';\r\n\r\n    //set variable if use select box\r\n    if(button_box.find('input.btn_is_variable:checked').val()) {\r\n        variable_id             = button_box.find('select.button_variable').val();\r\n    }\r\n    var data = {\r\n        'variable' : variable_id,\r\n        'message' : {\r\n            'attachment' : {\r\n                'type' : 'template',\r\n                'payload' : {\r\n                    'template_type' : type_button,\r\n                    'text' : button_title,\r\n                    'buttons' : []\r\n                }\r\n            }\r\n        }\r\n    };\r\n    $('.button_group .button_container .btn_box').each(function (index, element) {\r\n        var button_sub_title     = $(this).find('input.button_sub_title').val(),\r\n            button_sub_type      = $(this).find('select.button_sub_type').val(),\r\n            button_sub_data      = $(this).find('input.button_sub_data').val(),\r\n            button_sub_scenario  = $(this).find('select.button_sub_scenario').val();\r\n        var button_data = {\r\n            'type' : template_button_flip[button_sub_type],\r\n            'title' : button_sub_title\r\n        };\r\n        if(button_sub_type == template_button['web_url']) {\r\n            button_data['url']          = button_sub_data;\r\n\r\n        } else if(button_sub_type == template_button['postback']) {\r\n            if(variable_id == void 0 || variable_id == '') {\r\n                variable_id = '-1';\r\n            }\r\n            var button_sub_title_base64 = base64Encode(button_sub_title, '-1');\r\n            button_data['payload']      = 'SCENARIO_' + button_sub_scenario  + '_' + variable_id + '_' + button_sub_title_base64;\r\n\r\n        } else {\r\n            button_data['payload']      = button_sub_data;\r\n        }\r\n        data['message']['attachment']['payload']['buttons'].push(button_data);\r\n    });\r\n    data = JSON.stringify(data);\r\n    changeDataBotMessage(data);\r\n}\r\n\r\n/**\r\n * get first file\r\n */\r\nfunction getDataFile() {\r\n    var file_url    = $('.file_group .file_url_input').val(),\r\n        type        = common_data['bot_content_type'];\r\n    file_url        = $.trim(file_url);\r\n    var file_type   = checkTypeFile(file_url);\r\n\r\n    if(file_type) {\r\n        var data = {\r\n            'message' : {\r\n                'attachment' : {\r\n                    'type'      : file_type,\r\n                    'payload'   : {\r\n                        'url'   : file_url\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        data = JSON.stringify(data);\r\n        changeDataBotMessage(data);\r\n        //set title for button demo in message content box\r\n        setDataMediaDemo();\r\n        changeLabelMediaDemo(file_type);\r\n    } else {\r\n        console.log('File type not valid type');\r\n        //clear bot message content\r\n        changeDataBotMessage('');\r\n        setDataMediaDemo(true);\r\n    }\r\n}\r\n\r\n/**\r\n * get button data to json and fill to message box\r\n */\r\nfunction getDataGeneric() {\r\n    var template_button         = common_data['template_button'],\r\n        template_button_flip    = common_data['template_button_flip'],\r\n        type                    = common_data['bot_content_type'];\r\n    var data = {\r\n        'message' : {\r\n            'attachment' : {\r\n                'type'      : 'template',\r\n                'payload'   : {\r\n                    'template_type' : type_generic,\r\n                    'elements'      : []\r\n                }\r\n            }\r\n        }\r\n    };\r\n    $('.generic_container .generic_box').each(function (index, element) {\r\n        var title     = $(this).find('input.title').val(),\r\n            sub_type  = $(this).find('input.sub_title').val(),\r\n            item_url  = $(this).find('input.item_url').val(),\r\n            image_url = $(this).find('input.image_url').val();\r\n        var generic_data = {\r\n            'title'     : title,\r\n            'subtitle'  : sub_type,\r\n            'item_url'  : item_url,\r\n            'image_url' : image_url\r\n        };\r\n\r\n        //loop button in generic box\r\n        $(this).find('.generic_button_container .button_type_container').each(function (index2, element2) {\r\n            //create button array if not exist\r\n            if(generic_data['buttons'] == void 0) {\r\n                generic_data['buttons'] = [];\r\n            }\r\n            var button_title        = $(this).find('input.button_title').val(),\r\n                button_sub_type     = $(this).find('select.button_sub_type').val(),\r\n                button_sub_data     = $(this).find('input.button_sub_data').val(),\r\n                button_sub_scenario = $(this).find('select.button_sub_scenario').val();\r\n\r\n            var button_data = {\r\n                'title'     : button_title,\r\n                'type'      : template_button_flip[button_sub_type]\r\n            };\r\n\r\n            if(button_sub_type == template_button['web_url']) {\r\n                button_data['url']          = button_sub_data;\r\n            } else if(button_sub_type == template_button['postback']) {\r\n                button_data['payload']      = 'SCENARIO_' + button_sub_scenario + '_' + button_title.replace(/[_]/g, '');\r\n            } else if(button_sub_type == template_button['element_share']) {\r\n                button_data = {'type' : 'element_share'};\r\n            } else {\r\n                button_data['payload']      = button_sub_data;\r\n            }\r\n            //push to buttons in generic_data\r\n            generic_data['buttons'].push(button_data);\r\n        });\r\n        data['message']['attachment']['payload']['elements'].push(generic_data);\r\n    });\r\n    data = JSON.stringify(data);\r\n    changeDataBotMessage(data);\r\n}\r\n\r\n\r\n/**\r\n * get button data to json and fill to message box\r\n */\r\nfunction getDataQuickReply() {\r\n    var qr_group                        = $('.quick_replies_group'),\r\n        qr_title                        = qr_group.find('input.quick_replies_title').val(),\r\n        variable_id                     = '',\r\n        template_quick_replies          = common_data['template_quick_replies'],\r\n        template_quick_replies_flip     = common_data['template_quick_replies_flip'],\r\n        user_keyword_matching           = qr_group.find('#user_keyword_matching:checked').val();\r\n\r\n    //set variable if use select box\r\n    if(qr_group.find('input.qr_is_variable:checked').val()) {\r\n        variable_id                     = qr_group.find('select.quick_replies_variable').val();\r\n    }\r\n    //set user_keyword_matching if checked\r\n    if(user_keyword_matching == void 0 || user_keyword_matching == '') {\r\n        user_keyword_matching = 0;\r\n    }\r\n    user_keyword_matching = parseInt(user_keyword_matching);\r\n\r\n    var data = {\r\n        'variable' : variable_id,\r\n        'keyword_matching_flg' : user_keyword_matching,\r\n        'message' : {\r\n            'text' : qr_title,\r\n            'quick_replies' : []\r\n        }\r\n    };\r\n    qr_group.find('.quick_replies_box').each(function (index, element) {\r\n        var type                = $(this).find('select.button_sub_type').val(),\r\n            title               = $(this).find('input.button_sub_title').val(),\r\n            variable_code       = '';\r\n\r\n        var button_data = {\r\n            'content_type' : template_quick_replies_flip[type]\r\n        };\r\n        if(type == template_quick_replies['text']) {\r\n            var scenario_id      = '-1';\r\n            var btn_variable_id  = variable_id;\r\n            //set scenario if use scenario connect\r\n            if($(this).find('input.qr_is_scenario:checked').val()) {\r\n                scenario_id = $(this).find('select.button_sub_scenario').val();\r\n            }\r\n            if(btn_variable_id == void 0 || btn_variable_id == '') {\r\n                btn_variable_id = '-1';\r\n            } else {\r\n                variable_code = $(this).find('input.button_variable_code').val();\r\n                variable_code = base64Encode(variable_code);\r\n            }\r\n            button_data['title']     = title;\r\n            button_data['payload']   = 'QUICK_REPLIES_' + scenario_id + '_' + btn_variable_id + '_' + variable_code + '_' + user_keyword_matching;\r\n        }\r\n        data['message']['quick_replies'].push(button_data);\r\n    });\r\n    data = JSON.stringify(data);\r\n    changeDataBotMessage(data);\r\n}\r\n\r\n\r\n/**\r\n * get api data to json and fill to message box\r\n */\r\nfunction getDataApi() {\r\n    var api_val = apiElement(),\r\n        data    = {\r\n            'api' : api_val.val()\r\n        };\r\n    data = {'message' : data};\r\n    data = JSON.stringify(data);\r\n    changeDataBotMessage(data);\r\n}\r\n\r\n/**\r\n * get api data to json and fill to message box\r\n */\r\nfunction getDataScenarioConnect() {\r\n    var scenario_val = scenarioConnectElement(),\r\n        data         = {\r\n            'scenario' : scenario_val.val()\r\n        };\r\n    data = {'message' : data};\r\n    data = JSON.stringify(data);\r\n    changeDataBotMessage(data);\r\n}\r\n\r\n/**\r\n * get mail data to json and fill to message box\r\n */\r\nfunction getDataMail() {\r\n    var scenario_val = mailElement(),\r\n        data         = {\r\n            'mail' : scenario_val.val()\r\n        };\r\n    data = {'message' : data};\r\n    data = JSON.stringify(data);\r\n    changeDataBotMessage(data);\r\n}\r\n\r\n/**\r\n * get title from message_container_input for input User demo\r\n * @param is_clear\r\n */\r\nfunction setUserDataMediaDemo(is_clean) {\r\n    var user_message_box    = userMessageBoxElement();\r\n    if(is_clean != void 0 && is_clean) {\r\n        user_message_box.find('.user_media_content').val('');\r\n    } else {\r\n        var user_message_type = userMessageType(),\r\n            type = common_data['user_content_type'],\r\n            value;\r\n\r\n        if(user_message_type == type[type_api_variable_setting]) {\r\n            var element = apiVariableSettingElement(),\r\n                label_bot_smg  = $('.scenario_block_origin .bot_virtual_box .bot_api_variable_setting_view').data('label');\r\n            value = element.find(\"option[value='\" + element.val() + \"']\").text();\r\n            value = label_bot_smg + '[' + value + ']';\r\n        }\r\n        user_message_box.find('.user_media_content').val(value);\r\n    }\r\n}\r\n\r\n/**\r\n * get title from message_container_input for input Bot demo\r\n * @param is_clear\r\n */\r\nfunction setDataMediaDemo(is_clean) {\r\n    var bot_message_box = botMessageBoxElement();\r\n\r\n    if(is_clean != void 0 && is_clean) {\r\n        bot_message_box.find('.bot_media_content').val('');\r\n    } else {\r\n        var bot_message_type    = botMessageType(),\r\n            type                = common_data['bot_content_type'],\r\n            value;\r\n\r\n        if(bot_message_type == type[type_text]) {\r\n            var typeInput = botTextTypeInput();\r\n            value = typeInput.val();\r\n\r\n        } else if(bot_message_type == type[type_button]) {\r\n            value = $('.button_group .button_container input.button_title').val();\r\n\r\n        } else if(bot_message_type == type[type_generic]) {\r\n            value = '';\r\n        } else if(bot_message_type == type[type_quick_replies]) {\r\n            value = $('.quick_replies_group .quick_replies_title').val();\r\n        } else if(bot_message_type == type[type_file]) {\r\n            value = $('.file_group .file_url_input').val();\r\n\r\n        } else if(bot_message_type == type[type_api] || bot_message_type == type[type_scenario_connect] || bot_message_type == type[type_mail]) {\r\n            var element;\r\n            switch (bot_message_type) {\r\n                case type[type_api]:\r\n                    element = apiElement(); break;\r\n                case type[type_scenario_connect]:\r\n                    element = scenarioConnectElement(); break;\r\n                case type[type_mail]:\r\n                    element = mailElement(); break;\r\n            }\r\n            value = element.find(\"option[value='\" + element.val() + \"']\").text()\r\n\r\n        }\r\n        bot_message_box.find('.bot_media_content').val(value);\r\n    }\r\n}\r\n\r\n/**\r\n * Actions when select type user\r\n */\r\nfunction checkContentUserInput(type_current) {\r\n    var type = common_data['user_content_type'],\r\n        user_message = userMessageBoxElement(),\r\n        user_media_demo = $('.scenario_block .user_scenario .user_media_demo'),\r\n        group_message = '';\r\n    $('.message_user_area .type_group').hide();\r\n\r\n    //case type\r\n    switch (type_current){\r\n        case type[type_text]:\r\n            group_message = $('.message_user_area .text_group');\r\n            group_message.find('.tagsinput input').first().focus();\r\n\r\n            user_message.find('.user_media_content').addClass('hidden');\r\n            user_message.find('ul.tagit').removeClass('hidden');\r\n\r\n            //delete virtual bot message box\r\n            deleteBotVirtual();\r\n            break;\r\n        case type[type_library]:\r\n            group_message = $('.message_user_area .library_group');\r\n            //un-select all option\r\n            var lib_element = libraryListElement();\r\n            icheckAuto('uncheck', lib_element);\r\n\r\n            user_message.find('.user_media_content').addClass('hidden');\r\n            user_message.find('ul.tagit').removeClass('hidden');\r\n            cloneBotVirtual(null, type[type_library]);\r\n            break;\r\n        case type[type_api_variable_setting]:\r\n            //show button box\r\n            group_message = $('.message_user_area .api_variable_setting_group');\r\n\r\n            user_message.find('.user_media_content').removeClass('hidden');\r\n            user_message.find('ul.tagit').addClass('hidden');\r\n            cloneBotVirtual(null, type[type_api_variable_setting]);\r\n\r\n            //select and get first option for message\r\n            var api = apiVariableSettingElement();\r\n            apiVariableSettingElement(api.find('option').first().val());\r\n\r\n            getDataUserFromInput(type_api_variable_setting);\r\n            break;\r\n    }\r\n    if(group_message) {\r\n        group_message.show();\r\n        //set un-checked input and select first option variable, nlp\r\n        icheckAuto('uncheck', group_message.find('input.use_variable'));\r\n        selectFirstOption(group_message.find('select.select_variable'));\r\n        icheckAuto('uncheck', group_message.find('input.use_nlp'));\r\n        selectFirstOption(group_message.find('select.select_nlp'));\r\n    }\r\n}\r\n\r\n/**\r\n * Actions when click to user message\r\n */\r\nfunction checkContentUserMessage(type_current) {\r\n    var type = common_data['user_content_type'],\r\n        user_message = userMessageBoxElement(),\r\n        user_media_demo = $('.scenario_block .user_scenario .user_media_demo'),\r\n        group_message = '';\r\n\r\n    $('.message_user_area .type_group').hide();\r\n\r\n    //case type\r\n    switch (type_current){\r\n        case type[type_text]:\r\n            group_message = $('.message_user_area .text_group');\r\n            group_message.find('.tagsinput input').first().focus();\r\n\r\n            user_message.find('.user_media_content ').addClass('hidden');\r\n            user_message.find('ul.tagit').removeClass('hidden');\r\n\r\n            //delete virtual bot message box\r\n            deleteBotVirtual();\r\n            break;\r\n        case type[type_library]:\r\n            group_message = $('.message_user_area .library_group');\r\n            //un-select all option\r\n            var lib_element = libraryListElement();\r\n            icheckAuto('uncheck', lib_element);\r\n\r\n            user_message.find('.user_media_content').addClass('hidden');\r\n            user_message.find('ul.tagit').removeClass('hidden');\r\n            cloneBotVirtual(null, type[type_library]);\r\n            break;\r\n        case type[type_api_variable_setting]:\r\n            //show button box\r\n            group_message = $('.message_user_area .api_variable_setting_group');\r\n            user_message.find('.user_media_content ').removeClass('hidden');\r\n            user_message.find('ul.tagit').addClass('hidden');\r\n            cloneBotVirtual(null, type[type_api_variable_setting]);\r\n            //select and get first option for message\r\n            var api = apiVariableSettingElement();\r\n            apiVariableSettingElement(api.find('option').first().val());\r\n\r\n            break;\r\n    }\r\n    if(group_message) {\r\n        group_message.show();\r\n        //set un-checked input and select first option variable, nlp\r\n        icheckAuto('uncheck', group_message.find('input.use_variable'));\r\n        selectFirstOption(group_message.find('select.select_variable'));\r\n        icheckAuto('uncheck', group_message.find('input.use_nlp'));\r\n        selectFirstOption(group_message.find('select.select_nlp'));\r\n    }\r\n}\r\n\r\n/**\r\n * Actions when select type bot\r\n */\r\nfunction checkContentBotInput(type_current) {\r\n    var type = common_data['bot_content_type'];\r\n    bot_change_element();\r\n    //clear data text\r\n    botTextTypeInput('');\r\n    //clear data button\r\n    $('.button_group .button_container input.button_title').val('');\r\n    $('.button_group .button_container .btn_box').remove();\r\n    //clear data generic\r\n    $('.generic_group .generic_container .generic_box').remove();\r\n    $('.generic_indicators li').remove();\r\n    //clear data quick replies\r\n    $('.quick_replies_group input.quick_replies_title').val('');\r\n    $('.quick_replies_group .quick_replies_box').remove();\r\n    //clear validation class in select2 select\r\n    $('.message_bot_area .select2 .select2-selection').removeClass('validation-failed');\r\n\r\n    var bot_message_input   = botMessageBoxElement();\r\n    //hide validate old message box\r\n    setStyleElm(bot_message_input.find('.bot_media_content'), {'border' : ''});\r\n\r\n    //add button demo in bot message\r\n    checkViewMediaDemo();\r\n    switch (type_current) {\r\n        case type[type_text]:\r\n            $('.message_bot_area .text_group').show();\r\n            changeLabelMediaDemo('');\r\n            break;\r\n        case type[type_button]:\r\n            //show button box\r\n            $('.message_bot_area .button_group').show();\r\n            //set un-checked input variable\r\n            icheckAuto('uncheck', $('.message_bot_area .button_group #btn_is_variable'));\r\n            //add first button box\r\n            addButtonBox();\r\n            changeLabelMediaDemo(type_button);\r\n            break;\r\n        case type[type_file]:\r\n            $('.message_bot_area .file_group').show();\r\n            $('.file_group .file_url_input').val('');\r\n            changeLabelMediaDemo(type_file);\r\n            break;\r\n        case type[type_generic]:\r\n            generic_element_select();\r\n            //add first generic box\r\n            createGenericBox();\r\n            changeLabelMediaDemo(type_generic);\r\n            break;\r\n        case type[type_quick_replies]:\r\n            var qr_group = $('.message_bot_area .quick_replies_group');\r\n            qr_group.show();\r\n            //set un-checked input variable and user_keyword_matching\r\n            icheckAuto('uncheck', qr_group.find('#qr_is_variable'));\r\n            icheckAuto('uncheck', qr_group.find('#user_keyword_matching'));\r\n\r\n            //add first quick reply box\r\n            addQuickRepliesBox();\r\n            changeLabelMediaDemo(type_quick_replies);\r\n            break;\r\n        case type[type_api]:\r\n            $('.message_bot_area .api_group').show();\r\n            //select first option\r\n            var api_select = apiElement();\r\n            apiElement(api_select.find('option').first().val());\r\n            getDataFromInput(type_api);\r\n\r\n            changeLabelMediaDemo(type_api);\r\n            break;\r\n        case type[type_scenario_connect]:\r\n            $('.message_bot_area .scenario_connect_group').show();\r\n            //select first option\r\n            var scenario = scenarioConnectElement();\r\n            scenarioConnectElement(scenario.find('option').first().val());\r\n            //set first option for message\r\n            getDataFromInput(type_scenario_connect);\r\n\r\n            changeLabelMediaDemo(type_scenario_connect);\r\n            break;\r\n        case type[type_mail]:\r\n            $('.message_bot_area .mail_group').show();\r\n            //select first option\r\n            var mail_select = mailElement();\r\n            mailElement(mail_select.find('option').first().val());\r\n            //set first option for message\r\n            getDataFromInput(type_mail);\r\n\r\n            changeLabelMediaDemo(type_mail);\r\n            break;\r\n    }\r\n}\r\n\r\n/**\r\n * Actions when click to bot message\r\n */\r\nfunction checkContentBotMessage(type_current) {\r\n    var type = common_data['bot_content_type'];\r\n    bot_change_element();\r\n    switch (type_current){\r\n        case type[type_text]:\r\n            $('.message_bot_area .text_group').show();\r\n            break;\r\n        case type[type_button]:\r\n            //show button box\r\n            $('.message_bot_area .button_group').show();\r\n            break;\r\n        case type[type_file]:\r\n            $('.message_bot_area .file_group').show();\r\n            $('.file_group .file_url_input').val('');\r\n            break;\r\n        case type[type_generic]:\r\n            generic_element_select();\r\n            break;\r\n        case type[type_quick_replies]:\r\n            $('.message_bot_area .quick_replies_group').show();\r\n            break;\r\n        case type[type_api]:\r\n            $('.message_bot_area .api_group').show();\r\n            //select first option\r\n            var api_select = apiElement();\r\n            apiElement(api_select.find('option').first().val());\r\n            break;\r\n        case type[type_scenario_connect]:\r\n            $('.message_bot_area .scenario_connect_group').show();\r\n            //select first option\r\n            var scenario = scenarioConnectElement();\r\n            scenarioConnectElement(scenario.find('option').first().val());\r\n            break;\r\n        case type[type_mail]:\r\n            $('.message_bot_area .mail_group').show();\r\n            //select first option\r\n            var mail = mailElement();\r\n            mailElement(mail.find('option').first().val());\r\n            break;\r\n    }\r\n}\r\n\r\n/**\r\n * action for elements when change bot message\r\n */\r\nfunction bot_change_element() {\r\n    $('.message_bot_area .type_group').hide();\r\n    //clear old error\r\n    $('.message_bot_area .type_group label.error').remove();\r\n    $('.message_bot_area .type_group input.validation-failed, .message_bot_area .type_group textarea.validation-failed').removeClass('validation-failed');\r\n    //clear generic error\r\n    $('.message_bot_area .generic_error').addClass('hidden').find('.error_container').html('');\r\n\r\n    $('.message_bot_area .add_group_box').hide();\r\n    $('.message_bot_area .footer_message_input .carousel_slide').hide();\r\n    $('.message_bot_area .footer_message_input .carousel_indicator_item').hide();\r\n    $('.message_bot_area .footer_message_input .add_item_common').hide();\r\n    //clear data input\r\n    botTextTypeInput('');\r\n    message_area_select(true);\r\n}\r\n\r\n/**\r\n * action for elements when select generic in bot message\r\n */\r\nfunction generic_element_select() {\r\n    $('.message_bot_area .footer_message_input .carousel_slide').show();\r\n    $('.message_bot_area .footer_message_input .carousel_indicator_item').show();\r\n    $('.message_bot_area .generic_group').show();\r\n    $('.message_bot_area .add_group_box').show();\r\n}\r\n\r\n/**.\r\n * select bot message or user message\r\n * @param bot: undefined  or null: hide all\r\n */\r\nfunction message_area_select(bot) {\r\n    //hide message user area\r\n    var message_user_area = $('.message_container_input .message_user_area'),\r\n        message_bot_area  = $('.message_container_input .message_bot_area');\r\n    message_user_area.hide();\r\n    message_bot_area.hide();\r\n\r\n    if(bot != null) {\r\n        if(bot) {\r\n            message_bot_area.show();\r\n        } else {\r\n            message_user_area.show();\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * set data user mesage come back to input form\r\n */\r\nfunction setUserDataToForm() {\r\n    var user_message_val  = userMessageContent(),\r\n        user_message_type = userMessageType(),\r\n        user_message_variable = userMessageVariable(),\r\n        user_message_nlp = userMessageNlp(),\r\n        type              = common_data['user_content_type'],\r\n        user_input_text   = userInputText(),\r\n        group_message     = '';\r\n\r\n    /*fill data from user message to text input in right slidebar*/\r\n    switch (user_message_type) {\r\n        case type[type_text]:\r\n            group_message = $('.message_user_area .text_group');\r\n            user_input_text.importTags(user_message_val);\r\n            break;\r\n        case type[type_library]:\r\n            group_message = $('.message_user_area .library_group');\r\n            //re-check item\r\n            $(user_message_val.split(',')).each(function (index, value) {\r\n                if(value) {\r\n                    var library_item = libraryListElement(value);\r\n                    icheckAuto('check', library_item);\r\n                }\r\n            });\r\n            break;\r\n        case type[type_api_variable_setting]:\r\n            group_message = $('.message_user_area .api_variable_setting_group');\r\n            if(user_message_val) {\r\n                apiVariableSettingElement(user_message_val);\r\n            }\r\n            break;\r\n    }\r\n\r\n    if(group_message) {\r\n        if(user_message_variable) {\r\n            //set checked input variable\r\n            icheck_change_event = false;\r\n            icheckAuto('check', group_message.find('input.use_variable'));\r\n            icheck_change_event = true;\r\n            //set value for select variable\r\n            group_message.find('select.select_variable').val(user_message_variable);\r\n        }\r\n\r\n        if(user_message_nlp) {\r\n            //set checked input nlp\r\n            icheck_change_event = false;\r\n            icheckAuto('check', group_message.find('input.use_nlp'));\r\n            icheck_change_event = true;\r\n            //set value for select nlp\r\n            group_message.find('select.select_nlp').val(user_message_nlp);\r\n        }\r\n    }\r\n\r\n    userMessageVariable(user_message_variable);\r\n    userMessageNlp(user_message_nlp);\r\n}\r\n\r\n/**\r\n * set data bot message come back to input form\r\n */\r\nfunction setBotDataToForm() {\r\n    var bot_message_input   = botMessageElement(),\r\n        bot_message_val     = botMessageContent(),\r\n        bot_message_type    = botMessageType(),\r\n        type                = common_data['bot_content_type'];\r\n\r\n    //fill data from bot message to text input in right slidebar\r\n    var jsonData = jsonConverse(bot_message_val);\r\n\r\n    //if text simple case\r\n    if(bot_message_type == type[type_text]) {\r\n        var text = '';\r\n        if(jsonData && jsonData['message']) {\r\n            jsonData = jsonData['message'];\r\n            if(jsonData['text']) {\r\n                text = jsonData['text'];\r\n            }\r\n        }\r\n        botTextTypeInput(text);\r\n    } else {\r\n        var template_button = common_data['template_button'],\r\n            file_type       = common_data['file_type'];\r\n\r\n        if(bot_message_type == type[type_button]) {\r\n            var button_group = $('.button_group .button_container');\r\n            var variable_checkbox = button_group.find('#btn_is_variable'),\r\n                variable_select = button_group.find('select.button_variable');\r\n\r\n            //remove all button before action\r\n            button_group.find('.btn_box').remove();\r\n            button_group.find('input.button_title').val('');\r\n\r\n            //disable 'ifChanged' event of iCheck in this process, it call getDataButton() function make error data\r\n            icheck_change_event = false;\r\n            //set un-checked input is variable\r\n            icheckAuto('uncheck', variable_checkbox);\r\n            //checked first option variable\r\n            variable_select.val(variable_select.find('option').first().val());\r\n            //set value for variable\r\n            if(jsonData['variable'] != void 0 && jsonData['variable'] != '') {\r\n                //set checked input is variable\r\n                icheckAuto('check', variable_checkbox);\r\n                //set value for select variable\r\n                variable_select.val(jsonData['variable']);\r\n            }\r\n\r\n            var button_number = 0;\r\n            if(jsonData && jsonData['message']) {\r\n                jsonData            = jsonData['message']['attachment']['payload'];\r\n                button_group.find('input.button_title').val(jsonData['text']);\r\n                //create button detail\r\n                var buttons = jsonData['buttons'];\r\n                button_number = buttons.length;\r\n                for (var i=0; i<buttons.length; i++) {\r\n                    var clone       = $('.scenario_block_origin .btn_box').clone(),\r\n                        button_data = buttons[i],\r\n                        custom_data = button_data['payload'] ? button_data['payload'] : (button_data['url'] ? button_data['url'] : ''),\r\n                        placeholder = clone.find('input.button_sub_data').attr('data-label-url');\r\n\r\n                    clone.find('input.button_sub_title').val(button_data['title']);\r\n                    clone.find('select.button_sub_type').val(template_button[button_data['type']]);\r\n\r\n                    if(button_data['type'] == 'postback') {\r\n                        custom_data = custom_data.split('_');\r\n                        custom_data = custom_data[1];\r\n                        placeholder = clone.find('input.button_sub_data').attr('data-label-postback');\r\n\r\n                        clone.find('select.button_sub_scenario').val(custom_data);\r\n                        clone.find('.button_scenario_box').show();\r\n                        clone.find('.button_data_box').hide();\r\n                        clone.find('input.button_sub_data').removeClass('validate-require validate-url validate-white-list');\r\n\r\n                    } else if(button_data['type'] == 'phone_number') {\r\n                        placeholder = clone.find('input.button_sub_data').attr('data-label-phone');\r\n\r\n                        clone.find('input.button_sub_data').val(custom_data);\r\n                        clone.find('input.button_sub_data').removeClass('validate-url validate-white-list').addClass('validate-phone');\r\n\r\n                    } else {\r\n                        clone.find('input.button_sub_data').val(custom_data);\r\n                    }\r\n                    clone.find('input.button_sub_data').attr('placeholder', placeholder);\r\n                    button_group.append(clone);\r\n                    checkButtonBox();\r\n                }\r\n            }\r\n            //add button box for button and confirm type\r\n            if(button_number <= 0) {\r\n                addButtonBox();\r\n            }\r\n            //re-set default value\r\n            icheck_change_event = true;\r\n\r\n        } else if(bot_message_type == type[type_generic]) {\r\n            //remove all generic before action\r\n            $('.generic_group .generic_container .generic_box').remove();\r\n            $('.generic_indicators li').remove();\r\n\r\n            if(jsonData && jsonData['message']) {\r\n                jsonData = jsonData['message']['attachment']['payload']['elements'];\r\n                for (var i=0; i<jsonData.length; i++) {\r\n                    var clone           = $('.scenario_block_origin .generic_box').clone(),\r\n                        generic_data    = jsonData[i];\r\n\r\n                    clone.find('input.title').val(generic_data['title']);\r\n                    clone.find('input.sub_title').val(generic_data['subtitle']);\r\n                    clone.find('input.item_url').val(generic_data['item_url']);\r\n                    clone.find('input.image_url').val(generic_data['image_url']);\r\n                    //add a button for new Generic\r\n                    //------Carousel process\r\n                    //add class active for first item to show Carousel\r\n                    if(generic_data['buttons'] != void 0 && generic_data['buttons'] != '') {\r\n                        for (var j=0; j<generic_data['buttons'].length; j++) {\r\n                            var button_data     = generic_data['buttons'][j],\r\n                                button_clone    = $('.scenario_block_origin .generic_button_template .button_type_container').clone(),\r\n                                custom_data     = button_data['payload'] ? button_data['payload'] : (button_data['url'] ? button_data['url'] : ''),\r\n                                placeholder     = button_clone.find('input.button_sub_data').attr('data-label-url');\r\n\r\n                            button_clone.find('select.button_sub_type').val(template_button[button_data['type']]);\r\n                            button_clone.find('input.button_title').val(button_data['title']);\r\n\r\n                            if(button_data['type'] == 'postback') {\r\n                                custom_data = custom_data.split('_');\r\n                                custom_data = custom_data[1];\r\n                                placeholder = button_clone.find('input.button_sub_data').attr('data-label-postback');\r\n\r\n                                button_clone.find('select.button_sub_scenario').val(custom_data);\r\n                                button_clone.find('.button_scenario_box').show();\r\n                                button_clone.find('.button_data_box').hide();\r\n                                button_clone.find('input.button_sub_data').removeClass('validate-require validate-url validate-white-list');\r\n\r\n                            } else if(button_data['type'] == 'element_share') {\r\n                                button_clone.find('.button_title_box').hide();\r\n                                button_clone.find('input.button_title').removeClass('validate-require');\r\n                                button_clone.find('.button_data_box').hide();\r\n                                button_clone.find('input.button_sub_data').removeClass('validate-require validate-url validate-white-list');\r\n\r\n                            } else if(button_data['type'] == 'phone_number') {\r\n                                placeholder = button_clone.find('input.button_sub_data').attr('data-label-phone');\r\n\r\n                                button_clone.find('input.button_sub_data').val(custom_data);\r\n                                button_clone.find('input.button_sub_data').removeClass('validate-url validate-white-list').addClass('validate-phone');\r\n\r\n                            } else {\r\n                                button_clone.find('input.button_sub_data').val(custom_data);\r\n                            }\r\n                            button_clone.find('input.button_sub_data').attr('placeholder', placeholder);\r\n                            clone.find('.generic_button_container').append(button_clone);\r\n                        }\r\n                    }\r\n                    $('.generic_container').append(clone);\r\n\r\n                    //------Carousel process\r\n                    //set active for first item\r\n                    addCarouselIndicator('generic_indicators', true);\r\n                    checkCarouselSlide();\r\n\r\n                    //check to show, hide button delete box\r\n                    checkGenericBox();\r\n                    checkGenericButtonBox();\r\n                }\r\n            } else {\r\n                //add first generic box\r\n                createGenericBox();\r\n            }\r\n        } else if(bot_message_type == type[type_quick_replies]) {\r\n            var template_quick_replies  = common_data['template_quick_replies'],\r\n                qr_group                = $('.quick_replies_group');\r\n            //disable 'ifChanged' event of iCheck in this process, it call getDataQuickReply() function make error data\r\n            icheck_change_event = false;\r\n            //remove all button before action\r\n            qr_group.find('.quick_replies_box').remove();\r\n            qr_group.find('input.quick_replies_title').val('');\r\n            //set un-checked input is variable and user_keyword_matching\r\n            icheckAuto('uncheck', qr_group.find('#qr_is_variable'));\r\n            icheckAuto('uncheck', qr_group.find('#user_keyword_matching'));\r\n            //checked first option variable\r\n            qr_group.find('select.quick_replies_variable').val(qr_group.find('select.quick_replies_variable option').first().val());\r\n\r\n            if(jsonData) {\r\n                var is_variable = false;\r\n                //set variable if available\r\n                if(jsonData['variable'] != void 0 && jsonData['variable'] != '') {\r\n                    is_variable = true;\r\n                    //set checked input is variable\r\n                    icheckAuto('check', qr_group.find('#qr_is_variable'));\r\n                    //set value for select variable\r\n                    qr_group.find('select.quick_replies_variable').val(jsonData['variable']);\r\n                }\r\n\r\n                //set user_keyword_matching if available\r\n                if(jsonData['keyword_matching_flg'] != void 0 && jsonData['keyword_matching_flg']) {\r\n                    icheckAuto('check', qr_group.find('#user_keyword_matching'));\r\n                }\r\n\r\n                if(jsonData['message']) {\r\n                    jsonData = jsonData['message'];\r\n                    qr_group.find('input.quick_replies_title').val(jsonData['text']);\r\n                    //create quick replies detail\r\n                    var quick_replies = jsonData['quick_replies'];\r\n                    for (var i=0; i<quick_replies.length; i++) {\r\n                        var clone       = $('.scenario_block_origin .quick_replies_box').clone(),\r\n                            qr_data     = quick_replies[i];\r\n\r\n                        clone.find('select.button_sub_type').val(template_quick_replies[qr_data['content_type']]);\r\n                        if(qr_data['content_type'] == 'text') {\r\n                            clone.find('input.button_sub_title').val(qr_data['title']);\r\n                            if(qr_data['payload']) {\r\n                                var payload = qr_data['payload'];\r\n                                payload     = payload.split('QUICK_REPLIES_').pop();\r\n                                payload     = payload.split('_');\r\n\r\n                                var scenario_id = payload[0],\r\n                                    variable_code = (payload[2] != void 0) ? payload[2] : '';\r\n\r\n                                //if exist option selected then select this option\r\n                                if( clone.find(\"select.button_sub_scenario option[value='\" + scenario_id + \"']\").length) {\r\n                                    //set checked input is scenario\r\n                                    icheckAuto('check', clone.find('input.qr_is_scenario'));\r\n                                    //show set value for select scenario\r\n                                    var scenario = clone.find('select.button_sub_scenario');\r\n                                    scenario.removeClass('hidden');\r\n                                    scenario.val(scenario_id);\r\n                                }\r\n                                //show button_variable_code_box if variable is checked\r\n                                if(is_variable) {\r\n                                    //decode base 64\r\n                                    if(variable_code != void 0 && variable_code != '') {\r\n                                        try{\r\n                                            variable_code = base64Decode(variable_code);\r\n                                        } catch (e) {\r\n                                            variable_code = '';\r\n                                        }\r\n                                    }\r\n                                    clone.find('.button_variable_code_box').removeClass('hidden');\r\n                                    clone.find('input.button_variable_code').val(variable_code);\r\n                                }\r\n                            }\r\n                            clone.find('input.button_sub_title').addClass('validate-require');\r\n                        } else {\r\n                            clone.find('.button_title_box, .button_scenario_box, .button_variable_code_box').addClass('hidden');\r\n                            clone.find('input.button_sub_title').removeClass('validate-require');\r\n                        }\r\n                        qr_group.find('.quick_replies_container').append(clone);\r\n                        checkQuickReplyButtonBox();\r\n                    }\r\n                    //re-init icheck\r\n                    initIcheck($('.quick_replies_group input.qr_is_scenario'));\r\n                }\r\n            }\r\n            //add first quick replies box if is not exist any quick reply box\r\n            if($('.quick_replies_group .quick_replies_box').length <= 0) {\r\n                addQuickRepliesBox();\r\n            }\r\n\r\n            //re-set default value\r\n            icheck_change_event = true;\r\n\r\n        } else if(bot_message_type == type[type_file]) {\r\n            if(jsonData && jsonData['message']) {\r\n                if(jsonData['message']) {\r\n                    jsonData    = jsonData['message']['attachment'];\r\n                    var url     = jsonData['payload']['url'] ? jsonData['payload']['url'] : '';\r\n                    //set file url for file input\r\n                    $('.file_group .file_url_input').val(url);\r\n                }\r\n            }\r\n        } else if(bot_message_type == type[type_api]) {\r\n            if(jsonData && jsonData['message'] && jsonData['message'] != '') {\r\n                var api = jsonData['message']['api'];\r\n                //select option\r\n                apiElement(api);\r\n            } else {\r\n                //re get api if exist any api item\r\n                getDataFromInput(type_api);\r\n            }\r\n        } else if(bot_message_type == type[type_scenario_connect]) {\r\n            if(jsonData && jsonData['message'] && jsonData['message'] != '') {\r\n                var scenario = jsonData['message']['scenario'];\r\n                //select option\r\n                scenarioConnectElement(scenario);\r\n            } else {\r\n                //re get scenario if exist any api item\r\n                getDataFromInput(type_scenario_connect);\r\n            }\r\n        } else if(bot_message_type == type[type_mail]) {\r\n            if(jsonData && jsonData['message'] && jsonData['message'] != '') {\r\n                var mail = jsonData['message']['mail'];\r\n                //select option\r\n                mailElement(mail);\r\n            } else {\r\n                //re get mail if exist any api item\r\n                getDataFromInput(type_mail);\r\n            }\r\n        }\r\n    }\r\n\r\n    //check error input in message box and push notice\r\n    checkErrorBoxMessage();\r\n}\r\n\r\n/**\r\n * check if string can converse to json\r\n * @param value\r\n * @returns {boolean}\r\n */\r\nfunction jsonConverse(value){\r\n    try{\r\n        var result = JSON.parse(value);\r\n        return result;\r\n    } catch (error){\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * return file type from url\r\n * @param url\r\n * @returns {boolean}\r\n */\r\nfunction checkTypeFile(url) {\r\n    var extension       = url.substring(url.lastIndexOf('.') + 1).toLowerCase(),\r\n        image_file_type = ['jpg', 'jpeg', 'png', 'bmp', 'gif', 'bmp'],\r\n        video_file_type = ['3gp', '3g2', '3gp', 'asf', 'dat', 'divx', 'dv', 'f4v', 'm2ts', 'm4v', 'mkv', 'mod', 'mov', 'mp4', 'mpe', 'mpeg', 'mpeg4', 'mpg', 'mts', 'nsv', 'ogm', 'ogv', 'qt', 'tod', 'ts', 'vob', 'wmv'],\r\n        other_file_type = ['pdf'],\r\n        result          = false;\r\n\r\n    if (image_file_type.includes(extension)) {\r\n        result = 'image';\r\n    } else if(video_file_type.includes(extension)) {\r\n        result = 'video';\r\n    } else if(other_file_type.includes(extension)) {\r\n        result = 'file';\r\n    }\r\n    return result;\r\n}\r\n\r\nfunction changeLabelMediaDemo(value) {\r\n    var content             = '',\r\n        bot_message_input   = botMessageBoxElement(),\r\n        bot_type            = bot_message_input.find('.bot_media_demo .bot_type');\r\n    if(value != void 0 && value != '') {\r\n        content = bot_type.data(value.toLowerCase());\r\n        // console.log('key:' + value);\r\n        // console.log('-> ' + content);\r\n        bot_type.removeClass('hidden');\r\n    } else {\r\n        bot_type.addClass('hidden');\r\n    }\r\n    bot_type.html(content);\r\n}\r\n\r\n//check active slide to hide, show arrow\r\nfunction checkCarouselSlide() {\r\n    var arrow_left  = $(\".footer_message_input .carousel_slide [data-slide='prev']\"),\r\n        arrow_right = $(\".footer_message_input .carousel_slide [data-slide='next']\");\r\n\r\n    if ($('.generic_container .generic_box').length > 1) {\r\n        if($('.generic_container .generic_box:last-child').hasClass('active')) {\r\n            arrow_right.hide();\r\n            arrow_left.show();\r\n        } else if($('.generic_container .generic_box:first-child').hasClass('active')) {\r\n            arrow_right.show();\r\n            arrow_left.hide();\r\n        } else {\r\n            arrow_right.show();\r\n            arrow_left.show();\r\n        }\r\n    } else {\r\n        arrow_right.hide();\r\n        arrow_left.hide();\r\n    }\r\n    //re-active Carousel indicator (Because move indicator to outsite Carousel div)\r\n    var indexActive = $('.generic_container .generic_box.active').index();\r\n    $('.footer_message_input .generic_indicators li').removeClass('active');\r\n    $('.footer_message_input .generic_indicators li').eq(indexActive).addClass('active');\r\n}\r\n\r\n/**\r\n * re-set hieght for right sldiebar\r\n */\r\nfunction setHeightSlidebar() {\r\n    var fixedsidebar            = $('.fixedsidebar').innerHeight(),\r\n        space                   = 208,\r\n        group_box               = $('.message_bot_area .add_group_box'),\r\n        group_box_header        = 0;\r\n    if(group_box.css('display') != 'none') {\r\n        group_box_header = group_box.innerHeight() + parseInt(group_box.css('margin-bottom'));\r\n    }\r\n    var height_box = fixedsidebar - space - group_box_header;\r\n    $('.fixedsidebar .message_bot_area .slimScrollDiv').css('height', height_box + 'px');\r\n    $('.message_bot_area .fixedsidebar-content').css('height', height_box + 'px');\r\n}\r\n\r\nfunction initIcheck(element) {\r\n    if(element != void 0 && element) {\r\n        element.iCheck({\r\n            checkboxClass: 'icheckbox_minimal',\r\n            radioClass: 'iradio_minimal'\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * click to per messages to fill data and validate\r\n */\r\nfunction validateMessages() {\r\n    var msg_box_active = $('.scenario_block .message_box.active');\r\n    //re-fill data of current bot message for validate\r\n    setBotDataToForm();\r\n    $('.scenario_block .message_box.bot_scenario').each(function (i, e) {\r\n        $(this).click();\r\n    });\r\n    //re-active to active\r\n    if(msg_box_active.length) {\r\n        msg_box_active.click();\r\n    }\r\n}\r\n\r\n/**\r\n * check Error and set border color for Box Message\r\n */\r\nfunction checkErrorBoxMessage() {\r\n    var result = true;\r\n    var form_box            = '',\r\n        bot_message_type    = botMessageType(),\r\n        type                = common_data['bot_content_type'];\r\n    switch (bot_message_type) {\r\n        case type[type_text]:\r\n            form_box = $('.message_bot_area .text_group');\r\n            break;\r\n        case type[type_button]:\r\n            form_box = $('.message_bot_area .button_group');\r\n            break;\r\n        case type[type_generic]:\r\n            form_box = $('.message_bot_area .generic_group');\r\n            break;\r\n        case type[type_file]:\r\n            form_box = $('.message_bot_area .file_group');\r\n            break;\r\n        case type[type_quick_replies]:\r\n            form_box = $('.message_bot_area .quick_replies_group');\r\n            break;\r\n        case type[type_api]:\r\n            form_box = $('.message_bot_area .api_group');\r\n            break;\r\n        case type[type_scenario_connect]:\r\n            form_box = $('.message_bot_area .scenario_connect_group');\r\n            break;\r\n        case type[type_mail]:\r\n            form_box = $('.message_bot_area .mail_group');\r\n            break;\r\n    }\r\n\r\n    var form_style        = {'border' : ''},\r\n        bot_box           = botMessageBoxElement(),\r\n        bot_media_content = bot_box.find('.bot_media_content');\r\n    if(form_box != void 0 && form_box != '' && form_box.length) {\r\n        var validate      = validation_scenario('facebook', form_box, bot_message_type);\r\n        //if not demo bot input (bot_media_content) then get input messages_bot_content (only text type)\r\n        if(!bot_media_content.length) {\r\n            bot_media_content = bot_box.find('.messages_bot_content');\r\n        }\r\n        //validate button number of carousel\r\n        var validate_carousel = validateCarouselField();\r\n\r\n        if(!validate || !validate_carousel) {\r\n            result = false;\r\n            form_style        = {'border' : '1px solid #ff5f5f'};\r\n        }\r\n    }\r\n    setStyleElm(bot_media_content, form_style);\r\n    return result;\r\n}\r\n\r\n/**\r\n * Validate 1 in 3 field not empty (sub title, url image, button number)\r\n * @returns {boolean}\r\n */\r\nfunction validateCarouselField() {\r\n    var bot_message_type    = botMessageType(),\r\n        type                = common_data['bot_content_type'],\r\n        result              = true;\r\n\r\n    //clear common error\r\n    $('.message_bot_area .common_error').addClass('hidden').find('.error_container').html('');\r\n\r\n    if(bot_message_type == type[type_generic]) {\r\n        var bot_message_val = botMessageContent(),\r\n            jsonData        = jsonConverse(bot_message_val);\r\n\r\n        if(jsonData && jsonData['message'] != void 0 && jsonData['message']['attachment']['payload']['elements'] != void 0) {\r\n            var element = jsonData['message']['attachment']['payload']['elements'];\r\n            $(element).each(function (i, e) {\r\n                if((e['subtitle'] == void 0 || e['subtitle'] == '') && (e['image_url'] == void 0 || e['image_url'] == '') && (e['buttons'] == void 0 || !e['buttons'].length)) {\r\n                    var validation_msg_list = common_data['validation_msg_list'];\r\n                    //show error message in top carousel element\r\n                    if(validation_msg_list != void 0 && validation_msg_list['validate_incomplete_field_carousel'] != void 0) {\r\n                        var notice = '<label class=\"error\">' + validation_msg_list['validate_incomplete_field_carousel'] + '</label>';\r\n                        var generic_error_elm = $('.message_bot_area .generic_group .generic_box').eq(i).find('.generic_error');\r\n\r\n                        generic_error_elm.removeClass('hidden').find('.error_container').append(notice);\r\n                        //show error in Carousel slide\r\n                        showErrorCarouselItem('facebook', generic_error_elm, bot_message_type);\r\n                    }\r\n                    result = false;\r\n                }\r\n            });\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * set style for element\r\n */\r\nfunction setStyleElm(elm, style) {\r\n    if(elm != void 0 && elm != '' && elm.length && style != void 0 && style != '') {\r\n        elm.css(style);\r\n    }\r\n}\r\n\r\n/**\r\n * set select first option for select input\r\n * @param elm\r\n */\r\nfunction selectFirstOption(elm) {\r\n    elm.val(elm.find('option').first().val());\r\n}","/**\r\n * Created by nguyen.khac.tung on 4/19/2017.\r\n */\r\nvar error_class   = 'validation-failed',\r\n    success_class = 'validation-pass',\r\n    bot_content_type = null;\r\n\r\nfunction validation_scenario (service_name, form, bot_message_type) {\r\n    var validation_result   = true,\r\n        validation_msg_list = common_data['validation_msg_list'];\r\n    bot_content_type    = common_data['bot_content_type'];\r\n\r\n    var validate_types = {\r\n        validate_require    : \"validate-require\",\r\n        validate_url        : \"validate-url\",\r\n        validate_url_secure : \"validate-url-secure\",\r\n        validate_max        : \"validate-max\",\r\n        validate_min        : \"validate-min\",\r\n        validate_phone      : \"validate-phone\",\r\n        validate_white_list : \"validate-white-list\",\r\n        validate_number     : \"validate-number\"\r\n    };\r\n    //converse to array\r\n    var validate_value = Object.keys(validate_types).map(function(key) {\r\n        return validate_types[key];\r\n    });\r\n\r\n    clearCrouselError();\r\n\r\n    //check one checkbox is checked then not check other checkbox same name\r\n    var checkbox_name_list = {};\r\n\r\n    $(form.find('input:not(.hidden), textarea:not(.hidden), select:not(.hidden)')).each(function (index, elm) {\r\n        var elm_class = $(elm).attr('class');\r\n\r\n        if(!isEmpty(elm_class)) {\r\n            //clear old validate class\r\n            $(elm).removeClass(error_class);\r\n            $(elm).removeClass(success_class);\r\n            //if is select and using select2\r\n            if(isSelect2(elm)) {\r\n                $(elm).next('.select2').find('.select2-selection').removeClass(error_class).removeClass(success_class);\r\n            }\r\n\r\n            check(elm);\r\n        }\r\n    });\r\n    return validation_result;\r\n\r\n    function check(elm) {\r\n        var result_check    = true;\r\n        var elm_class       = $(elm).attr('class');\r\n        var elm_class_arr   = $(elm).attr('class').split(' ');\r\n        var value           = '';\r\n\r\n\r\n        if($(elm).attr('type') == 'checkbox' || $(elm).attr('type') == 'radio') {\r\n            if(!isEmpty($(elm).attr('name'))) {\r\n                var input_name = $(elm).attr('name');\r\n\r\n                //not check if any checkbox is checked\r\n                if(!isEmpty(checkbox_name_list[input_name]) && checkbox_name_list[input_name]) {\r\n                    return result_check;\r\n                }\r\n                //add input name to checkbox_name_list\r\n                if(isEmpty(checkbox_name_list[input_name])) {\r\n                    checkbox_name_list[input_name] = 0;\r\n                }\r\n                var input_list  = $(elm).parents('.type_group').find('input[name=\"' + input_name + '\"]:checked');\r\n                value           = $.map(input_list, function(c){return c.value;});\r\n\r\n                //set flg 1 for input name. Not check after checkbox checked\r\n                if(!isEmpty(value)) {\r\n                    checkbox_name_list[input_name] = 1;\r\n                }\r\n            } else {\r\n                value       = $(elm)[0].checked;\r\n            }\r\n        } else {\r\n            value           = $(elm).val();\r\n        }\r\n\r\n        //each class check if is validate class and call to check process\r\n        $(elm_class_arr).each(function (i, class_name) {\r\n            var error_code      = '';\r\n            var error_param_msg = {};\r\n            if(result_check == true && validate_value.indexOf(class_name) != -1) {\r\n                if(class_name == validate_types.validate_require && isEmpty(value)) {\r\n                    result_check = !(elm_class_arr.indexOf(validate_types.validate_require) != -1);\r\n\r\n                } else if(class_name != validate_types.validate_require && !isEmpty(value)) {\r\n                    switch (class_name) {\r\n                        //'Please enter a valid URL. Protocol is required (http://, https:// or ftp://)'\r\n                        case validate_types.validate_url :\r\n                            var value_replace = value.replace(/[{}]/g, '');\r\n                            result_check = /^(https?|ftp):\\/\\/(((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(\\#((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/i.test(value_replace);\r\n                            break;\r\n                        //'Please enter a valid URL. Protocol is required (http://, https:// or ftp://)'\r\n                        case validate_types.validate_url_secure :\r\n                            var value_replace = value.replace(/[{}]/g, '');\r\n                            result_check = /^(https):\\/\\/(((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(\\#((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/i.test(value_replace);\r\n                            break;\r\n                        //'Please enter a valid phone number. For example (123) 456-7890 or 123-456-7890.'\r\n                        //Origin backup: /^((\\d[-. ]?)?((\\(\\d{3}\\))|\\d{3}))?[-. ]?\\d{3}[-. ]?\\d{4}$/.test(value);\r\n                        case validate_types.validate_phone : result_check = /^\\+?((\\d{1,3}[-. ]?)?((\\(\\d{1,3}\\))|\\d{1,3}))?[-. ]?\\d{1,3}[-. ]?\\d{1,4}$/.test(value);\r\n                            break;\r\n                        //'Text length does not satisfy specified text range.'\r\n                        case validate_types.validate_max :\r\n                            var hasMax = /maximum-length-+[0-9]*/.test(elm_class);\r\n                            if (hasMax) {\r\n                                var reMax       = elm_class.match(/maximum-length-+[0-9]*/).toString(),\r\n                                    length      = reMax.split('-')[2];\r\n                                if(value.length > length) {\r\n                                    result_check = false;\r\n                                    error_param_msg['max'] = length;\r\n                                }\r\n                            }\r\n                            break;\r\n                        case validate_types.validate_min :\r\n                            var hasMin = /minimum-length-+[0-9]*/.test(elm_class);\r\n                            if (hasMin) {\r\n                                var reMin       = elm_class.match(/minimum-length-+[0-9]*/).toString(),\r\n                                    length      = reMin.split('-')[2];\r\n                                if(value.length < length) {\r\n                                    result_check = false;\r\n                                    error_param_msg['min'] = length;\r\n                                }\r\n                            }\r\n                            break;\r\n                        case validate_types.validate_white_list :\r\n                            var white_list_domain   = common_data['white_list_domain'];\r\n\r\n                            if(white_list_domain != void 0 && white_list_domain.length) {\r\n                                var result_input    = false;\r\n                                $(white_list_domain).each(function (i, domain) {\r\n                                    if(domain != '' && domain != void 0 && domain != null) {\r\n                                        var reg                = /[a-z0-9]+\\.*[a-z0-9]+\\.[a-z]+/,\r\n                                            white_domain_clear = domain.match(reg),\r\n                                            value_clear        = value.match(reg);\r\n                                        if(value_clear.toString() == white_domain_clear.toString()) {\r\n                                            result_input = true;\r\n                                        }\r\n                                    }\r\n                                });\r\n                                if(!result_input) {\r\n                                    result_check = false;\r\n                                }\r\n                            }\r\n                            break;\r\n                        case validate_types.validate_number : result_check = !isNaN(value) && /^\\s*-?\\d*(\\.\\d*)?\\s*$/.test(value);\r\n                            break;\r\n                    }\r\n                }\r\n                //remove old error\r\n                clearMsg(elm);\r\n                if(!result_check) {\r\n                    error_code = class_name;\r\n                    validate_view(elm, result_check, error_code, error_param_msg);\r\n\r\n                    //show error in Carousel slide\r\n                    showErrorCarouselItem(service_name, elm, bot_message_type);\r\n                }\r\n            }\r\n        });\r\n        return result_check;\r\n    }\r\n\r\n    function isEmpty(v) {\r\n        return (v == '' || (v == null) || (v.length == 0) || /^\\s+$/.test(v));\r\n    }\r\n\r\n    /**\r\n     * Actions with validate input\r\n     * @param elm\r\n     * @param result_check\r\n     * @param error_code\r\n     * @param error_param_msg\r\n     */\r\n    function validate_view(elm, result_check, error_code, error_param_msg) {\r\n        if($(elm).length) {\r\n            //add message if is error or clear error class if not error\r\n            if (!result_check) {\r\n                validation_result = false;\r\n                //set error class for that elm\r\n                $(elm).addClass(error_class);\r\n                //add message\r\n                if(!isEmpty(error_code)) {\r\n                    error_code = error_code.replace(/-/g, '_');\r\n                    var msg = error_code;\r\n                    if(!isEmpty(validation_msg_list) && !isEmpty(validation_msg_list[error_code])) {\r\n                        //replace attribute message by value\r\n                        msg = setParamMessage(error_param_msg, validation_msg_list[error_code]);\r\n                    }\r\n                    var error_element = \"<label class='error'>\" + msg + \"</label>\";\r\n\r\n                    //if is select using select2\r\n                    if(isSelect2(elm)) {\r\n                        //set border for select2\r\n                        $(elm).next('.select2').find('.select2-selection').addClass(error_class);\r\n                        //set message after select2\r\n                        $(elm).next('.select2').after(error_element);\r\n                    } else {\r\n                        if($(elm).attr('type') == 'checkbox' || $(elm).attr('type') == 'radio') {\r\n                            var input_type = $(elm).attr('type');\r\n\r\n                            $(elm).parents('.' + input_type + '_box').append(error_element);\r\n                        } else {\r\n                            $(elm).after(error_element);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                $(elm).addClass(success_class);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clear message\r\n     * @param elm\r\n     */\r\n    function clearMsg(elm) {\r\n        $(elm).parent().find('label.error').remove();\r\n\r\n        if($(elm).attr('type') == 'checkbox' || $(elm).attr('type') == 'radio') {\r\n            var input_type = $(elm).attr('type');\r\n            $(elm).parents('.' + input_type + '_box').find('label.error').remove();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clear error carousel slide\r\n     */\r\n    function clearCrouselError() {\r\n        $('.scenario-edit .message_bot_area .footer_message_input .carousel_indicator_item li').removeClass(error_class);\r\n    }\r\n\r\n    /**\r\n     * set value for attribute code in string\r\n     * @param param\r\n     * @param str\r\n     * @returns {*}\r\n     */\r\n    function setParamMessage(param, str) {\r\n        if(!isEmpty(param) && typeof param == 'object') {\r\n            $.each(param, function(code, value) {\r\n                if(!isEmpty(value)) {\r\n                    code = ':' + code;\r\n                    var re = new RegExp(code, \"g\");\r\n                    str = str.replace(re, value);\r\n                }\r\n            });\r\n        }\r\n        return str;\r\n    }\r\n}\r\n\r\n/**\r\n * Show error in Carousel slide\r\n */\r\nfunction showErrorCarouselItem(service_name, elm, bot_message_type) {\r\n    if(bot_content_type != null) {\r\n        var carousel_type = '';\r\n        switch (service_name) {\r\n            case 'facebook' : carousel_type = bot_content_type[type_generic]; break;\r\n            case 'line' : carousel_type = bot_content_type[type_carousel]; break;\r\n        }\r\n\r\n        if(bot_message_type == carousel_type) {\r\n            var elm_index = $(elm).parents('.generic_box.item').index(),\r\n                elm_dot   = $('.scenario-edit .message_bot_area .footer_message_input .carousel_indicator_item li').eq(elm_index);\r\n            if(!elm_dot.hasClass(error_class)) {\r\n                elm_dot.addClass(error_class);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction isSelect2(elm) {\r\n    if($(elm).hasClass('select2-hidden-accessible') && $(elm).next('.select2').length) {\r\n        return true;\r\n    }\r\n    return false;\r\n}"]}